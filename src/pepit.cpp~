#include <Rcpp.h>
using namespace Rcpp;

// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//

// [[Rcpp::export]]
NumericVector timesTwo(NumericVector x) {
  return x * 2;
}

// [[Rcpp::export]]
double distloc(NumericMatrix X, int ind1, int ind2) {
  int i;
  double x,y,sum=0;
  for (i=0;i<3;i++) {
    x=X(ind1-1,i);
    y=X(ind2-1,i);
    sum+=(x-y)*(x-y);
  }
  return sqrt(sum);
}

//' Constructs vertices of correspondence graph
//'
//' @param XProp vecteur of atom types N
//' @param YProp vecteur of atom types N
//' @param V matrix Nvx2 of vertices; vertex=(atom index, atom index)
//' @export
// [[Rcpp::export]]
IntegerMatrix vertex(CharacterVector XProp,  CharacterVector YProp) {
  int i,ip,v=0;
  int N=XProp.size();
  int M=YProp.size();
  fprintf(stdout, "..in vertex\n");
  IntegerMatrix V(N*M,2);
  for(i=0; i<M; i++) {
    for (ip=0; ip<N; ip++) {
      if (strcmp(XProp(ip),YProp(i))==0) {
        V(v,0)=i+1;
        V(v,1)=ip+1;
        v++;
      }
    }
  }
  if (v<=1) {
        fprintf(stderr,"no product graph...\n");
        return V(Range(0,0),_);
  }
  fprintf(stdout, "%d vertices\n", V.nrow());
  return V(Range(0,v-1),_);
}

//' Constructs correspondence graph
//'
//' @param X matrix Nx3
//' @param Y matrix Nx3
//' @param V matrix Nvx2
//' @param deltadist 
//' @param mindist
//' @param maxdist
//' @export
// [[Rcpp::export]]
IntegerMatrix buildGraph(NumericMatrix X, NumericMatrix Y, IntegerMatrix V,  double deltadist, double mindist, double maxdist) {
  int i,j, nv, e=0;
  double d,d1,d2;
  std::vector<int> Etmp;

  nv=V.nrow();
  for(i=0; i<nv-1; i++) {
    for (j=i+1; j<nv; j++) {
      //printf("%d %d %d %d\n",V(i,0),V(j,0),V(i,1),V(j,1));
      d1=distloc(Y,V(i,0),V(j,0)); // dist between atoms i and j in Y
      d2=distloc(X,V(i,1),V(j,1)); // dist between atoms i and j in X
      d=fabs(d1-d2);
      if (d<=deltadist && d1>=mindist && d2>=mindist && d1<=maxdist && d2<=maxdist) {
        Etmp.push_back(V(i,1));
        Etmp.push_back(V(j,1));
        Etmp.push_back(V(i,0));
        Etmp.push_back(V(j,0));
        e+=1;
      }
    }
  }
  int n=Etmp.size();
  IntegerMatrix E(e,4);
  for (i=0,j=0; i<n-3; i+=4,j++) {
    E(j,0)=Etmp[i];
    E(j,1)=Etmp[i+1];
    E(j,2)=Etmp[i+2];
    E(j,3)=Etmp[i+3];
  }
  Etmp.clear();
  return E;
}


// You can include R code blocks in C++ files processed with sourceCpp
// (useful for testing and development). The R code will be automatically
// run after the compilation.
//

/*** R
timesTwo(42)
*/

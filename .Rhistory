library(pepit)
pdb=read.pdb("2pdz")
pdb=trim.pdb(pdb, string="protein")
pdb=trim.pdb(pdb, string="noh")
pdb=type_atoms(pdb, ligchain="B")
holo=access_atoms(pdb, chains="A", add="calpha", minacc=10, select=FALSE)
bsnlig=get_binding_sites(holo, target_chains="A", ligand_chains="B", add="calpha", add.ligand=TRUE, access=10)
bs=bio3d::trim.pdb(bsnlig,chain="A") # to get rid of ligand (chain B)
#holo=trim_non_acc_atoms(holo, minacc=10) #utile?
Y=bs$atom[,c("x","y","z")]
Y=as.matrix(Y)
YProp=bs$atom$elesy
result=cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types=c("A"))#si maxdist=15, pas tout
clusters=extend_cliques(X, XProp, Y, YProp, result, deltadist=1.0)
clusters=remove_redundant_clusters (clusters)
# output : list$len, $alen, $coverage, $rmsd, $distorsion, $score
results=score_clusters(clusters, X, Y,  deltadist=1.0)
x=sort_results(clusters, results, criteria="score")
results=x$results
clusters=x$clusters
pdb2=read.pdb("1g3j")
pdb2=bio3d::trim.pdb(pdb2,chain="A")
write.pdb(pdb=pdb2, file = "target.pdb")
for (i in 1:length(clusters)) {
ligand.moved=superpose_sites(clusters[[i]], bsnlig, target2, pepchain="B")
clashes(ligand.moved, pdb2)
outfile = paste("test", i, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = outfile)
}
pdb=read.pdb("2pdz")
pdb=trim.pdb(pdb, string="protein")
pdb=trim.pdb(pdb, string="noh")
pdb=type_atoms(pdb)
target=access_atoms(pdb, chains="A", add="calpha", minacc=10, select=FALSE)
bs=get_binding_sites(target, target_chains="A", ligand_chains="B", add="calpha", add.ligand=TRUE, access=10)
bs=bio3d::trim.pdb(bs,chain="A") # to get rid of ligand (chain B)
target=trim_non_acc_atoms(target, minacc=10) #
X=target$atom[,c("x","y","z")]
X=as.matrix(X)
Y=bs$atom[,c("x","y","z")]
Y=as.matrix(Y)
XProp=target$atom$elesy
YProp=bs$atom$elesy
result=cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=25.0, types=c("A"))#si maxdist=15, pas tout
result=extend_cliques(X, XProp, Y, YProp, result, deltadist=1.0)
result=remove_redundant_clusters (result)
score_clusters(result, X, Y,  deltadist=1.0)
result
x=c("a","b","c")
setdiff(x,"b")
setdiff(x,"d")
help(write.pdb)
D=read.table("/home/frederic/3D/PeptiDB/peptiDB.dat", header=TRUE)
liste=as.character(D[,1])
liste
head(D)
read.pdb("1AWR")
x="HL"
tchain=x
tchain=unlist(strsplit(tchain,split=""))
tchain
head(D)
clusters
# output : list$len, $alen, $coverage, $rmsd, $distorsion, $score
results=score_clusters(clusters, X, Y,  deltadist=1.0)
results
library(pepit)
#
#
#
pdb2=read.pdb("1g3j")
pdb2=bio3d::trim.pdb(pdb2,chain="A")
pdb2=type_atoms(pdb2)
target2=access_atoms(pdb2, chains="A", add="calpha", select=FALSE)
target2=trim_non_acc_atoms(target2,minacc=10)
X=target2$atom[,c("x","y","z")]
X=as.matrix(X)
XProp=target2$atom$elesy
pdb=read.pdb("2pdz")
pdb=trim.pdb(pdb, string="protein")
pdb=trim.pdb(pdb, string="noh")
pdb=type_atoms(pdb, ligchain="B")
holo=access_atoms(pdb, chains="A", add="calpha", minacc=10, select=FALSE)
bsnlig=get_binding_sites(holo, target_chains="A", ligand_chains="B", add="calpha", add.ligand=TRUE, access=10)
bs=bio3d::trim.pdb(bsnlig,chain="A") # to get rid of ligand (chain B)
#holo=trim_non_acc_atoms(holo, minacc=10) #utile?
Y=bs$atom[,c("x","y","z")]
Y=as.matrix(Y)
YProp=bs$atom$elesy
result=cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types=c("A"))#si maxdist=15, pas tout
clusters=extend_cliques(X, XProp, Y, YProp, result, deltadist=1.0)
clusters=remove_redundant_clusters (clusters)
# output : list$len, $alen, $coverage, $rmsd, $distorsion, $score
results=score_clusters(clusters, X, Y,  deltadist=1.0)
x=sort_results(clusters, results, criteria="score")
results=x$results
# output : list$len, $alen, $coverage, $rmsd, $distorsion, $score
results=score_clusters(clusters, X, Y,  deltadist=1.0)
results
x=sort_results(clusters, results, criteria="score")
results=x$results
clusters=x$clusters
clusters
bsnlig
bsnlig$atom
clusters[[1]]
i=1
N
N=nrow(X)
N
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# query indices
I
J
bsnlig$atom[675,]
bs$atom[675,]
bsnlig$atom[3,]
bs$atom[3,]
infile="inst/nanoBank.dat"
BSBANK="~/home/3D/PeptiDB/APDB_100/nanoBS/"
D=read.table(infile, header=TRUE)
D=read.table(infile, header=TRUE)
D
i=1
id=as.character(D[i,1])
tchain=as.character(D[i,2])
lchain=as.character(D[i,3])
outfile=paste(BSBANK,"/",id,tchain,":",lchain,".pdb",sep="")
id
tchain
qchain
lchain
outfile
pdb=read.pdb(id)
chainlist=unique(pdb$atom$chain)
tchain=unlist(strsplit(tchain,split=""))
tchain=intersect(tchain, chainlist)
tchain=setdiff(tchain, lchain)
tchain
pdb=trim.pdb(pdb, string="protein")
pdb=trim.pdb(pdb, string="noh")
pdb=type_atoms(pdb, ligchain=lchain) # ligchain is not typed
holo=access_atoms(pdb, chains=tchain, add="calpha", minacc=10, select=FALSE)
bsnlig=get_binding_sites(holo, target_chains=tchain, ligand_chains=lchain, add="calpha", add.ligand=TRUE, access=10)
write.pdb(bsnlig, file=outfile)
outfile
BSBANK
BSBANK="/home/3D/PeptiDB/APDB_100/nanoBS/""
""
BSBANK="/home/3D/PeptiDB/APDB_100/nanoBS/"
outfile=paste(BSBANK,"/",id,tchain,":",lchain,".pdb",sep="")
outfile
write.pdb(bsnlig, file=outfile)
BSBANK="~/3D/PeptiDB/APDB_100/nanoBS/"
outfile=paste(BSBANK,"/",id,tchain,":",lchain,".pdb",sep="")
outfile
write.pdb(bsnlig, file=outfile)
tfile="2pdz"
tchain="A"
bank="~/3D/PeptiDB/APDB_100/nanoBS/1ywo A:P.pdb"
MINSCORE = 10
MAXCLASHES = 10
pdb = read.pdb(tfile)
chainlist = unique(pdb$atom$chain)
tchain = unlist(strsplit(tchain,split=""))
tchain = intersect(tchain, chainlist)
tchain = setdiff(tchain, lchain)
tchain
pdb = bio3d::trim.pdb(pdb,chain=tchain)
pdb = type_atoms(pdb)
target = access_atoms(pdb, chains=tchain, add="calpha", select=FALSE)
target = trim_non_acc_atoms(target,minacc=10)
X=target$atom[,c("x","y","z")]
X=as.matrix(X)
XProp=target$atom$elesy
bank
bank="~/3D/PeptiDB/APDB_100/nanoBS/1ywoA:P.pdb"
if (dir.exists(bank)) { # if bank is directory of bs files
bslist = dir(bank)
} else if (file.exists(bank)) { # if bank is a bs file
pos = gregexpr("/",bank)
last = length(pos[[1]])
bslist = substring(bank,first=pos[[1]][last]+1)
bank = substring(bank,first=1,last=pos[[1]][last])
}
bank
bslist
n=length(bslist)
n
bsfile=bslist[1]
bsflie
bsfile
bsfile = paste(bank,"/",bsfile,sep="")
bsfile
bsnlig = read.pdb(bsfile)
chains = unique(pdb$atom$chain)
chains = setdiff(chains, "P")
chains
bsnlig
bs = bio3d::trim.pdb(bsnlig,chain=chains) # to get rid of peptide (chain P)
Y = bs$atom[,c("x","y","z")]
Y = as.matrix(Y)
YProp = bs$atom$elesy
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types="A")
result
XProp
YProp
patchsearch_MINCLIQUEATOMS=6
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types="A")
library(pepit)
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types="A")
library(pepit)
library(pepit)
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types="A")
library(pepit)
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types="A")
library(pepit)
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types="A")
library(pepit)
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types="A", minclique=5)
clusters = extend_cliques(X, XProp, Y, YProp, result, deltadist=1.0)
clusters = remove_redundant_clusters (clusters)
scores = score_clusters(clusters, X, Y,  deltadist=1.0)
x = sort_results(clusters, results, criteria="score")
scores = x$scores
clusters = x$clusters
scores
clusters
scores
scores = score_clusters(clusters, X, Y,  deltadist=1.0)
x = sort_results(clusters, scores, criteria="score")
scores = x$scores
clusters = x$clusters
scores
scores = score_clusters(clusters, X, Y,  deltadist=1.0)
scores
x = sort_results(clusters, scores, criteria="score")
x
scores = x$results
clusters = x$clusters
scores
clusters
if (!file.exists(outfile)) cat("bs target precision bslen alen clen rmsd coverage meandist score\n", file=outfile, append=TRUE)
for (i in 1:length(scores)) {
if(scores[i]>MINSCORE) {
ligand.moved = superpose_sites(clusters[[i]], bsnlig, target, pepchain="P")
nbclashes = clashes(ligand.moved, pdb)
if (nbclashes <= MAXCLASHES) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
cat(bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], "\n", file=outfile, append=TRUE)
bs_res = paste(bs$atom$resno[J],":",aa321(bs$resid[J]),":",bs$atom$chain[J], sep="")
target_res = paste(target$atom$resno[J],":",aa321(target$atoms$resid[J]),":",target$atom$chain[J], sep="")
cat(">",bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], "\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
pepfile = paste("test", i, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
}
scores
for (i in 1:length(scores)) {
if(scores$scores[i]>MINSCORE) {
ligand.moved = superpose_sites(clusters[[i]], bsnlig, target, pepchain="P")
nbclashes = clashes(ligand.moved, pdb)
if (nbclashes <= MAXCLASHES) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
cat(bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], "\n", file=outfile, append=TRUE)
bs_res = paste(bs$atom$resno[J],":",aa321(bs$resid[J]),":",bs$atom$chain[J], sep="")
target_res = paste(target$atom$resno[J],":",aa321(target$atoms$resid[J]),":",target$atom$chain[J], sep="")
cat(">",bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], "\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
pepfile = paste("test", i, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
}
for (i in 1:length(scores)) {
if(scores$score[i]>MINSCORE) {
ligand.moved = superpose_sites(clusters[[i]], bsnlig, target, pepchain="P")
nbclashes = clashes(ligand.moved, pdb)
if (nbclashes <= MAXCLASHES) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
cat(bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], "\n", file=outfile, append=TRUE)
bs_res = paste(bs$atom$resno[J],":",aa321(bs$resid[J]),":",bs$atom$chain[J], sep="")
target_res = paste(target$atom$resno[J],":",aa321(target$atoms$resid[J]),":",target$atom$chain[J], sep="")
cat(">",bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], "\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
pepfile = paste("test", i, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
}
getwd()
MINSCORE
scores$score
#1AWR C I 2ALF:A 6 NR
# Rscript inst/BuiltBSBank.R inst/nanoBank.dat ~/3D/PeptiDB/APDB_100/nanoBS/
# Rscript inst/pepit.R 2alf A ~/3D/PeptiDB/APDB_100/nanoBS/1awrC:I.pdb 2alf
tfile = "2alf"
tchain = "A"
bank  = "~/3D/PeptiDB/APDB_100/nanoBS/1awrC:I.pdb"
prefix = "2alf"
#
# inputs:
# target pdb file
# target chain(s)
# binding site bank or one bs pdb file
# label for generating output files
# outputs:
# score file
# alignment/matching file
# pdb files of posed peptides
library(pepit)
library(bio3d)
MINSCORE = 10
MAXCLASHES = 10
criteria = "score"
outfile = paste(prefix, ".score", sep="")
pdb = read.pdb(tfile)
chainlist = unique(pdb$atom$chain)
tchain = unlist(strsplit(tchain,split=""))
tchain = intersect(tchain, chainlist)
pdb = bio3d::trim.pdb(pdb,chain=tchain)
pdb = type_atoms(pdb)
target = access_atoms(pdb, chains=tchain, add="calpha", select=FALSE)
target = trim_non_acc_atoms(target,minacc=10)
X=target$atom[,c("x","y","z")]
X=as.matrix(X)
XProp=target$atom$elesy
if (file.exists(bank) & dir.exists(bank)) { # if bank is directory of bs files
bslist = dir(bank)
bslist = paste(bank,"/",bslist,sep="")
} else if (file.exists(bank)) { # if bank is a bs file
bslist = bank
}
n=length(bslist)
bslist
bsfile=bslist
cat("bsfile=", bsfile,"\n")
bsnlig = read.pdb(bsfile)
chains = unique(pdb$atom$chain)
chains = setdiff(chains, "P")
bs = bio3d::trim.pdb(bsnlig,chain=chains) # to get rid of peptide (chain P)
Y = bs$atom[,c("x","y","z")]
Y = as.matrix(Y)
YProp = bs$atom$elesy
dim(Y)
bsnlig
chains
chains = unique(bsnlig$atom$chain)
chains = setdiff(chains, "P")
bs = bio3d::trim.pdb(bsnlig,chain=chains) # to get rid of peptide (chain P)
bs
Y = bs$atom[,c("x","y","z")]
Y = as.matrix(Y)
YProp = bs$atom$elesy
Y
YProp
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=15.0, types="A")
result
clusters = extend_cliques(X, XProp, Y, YProp, result, deltadist=1.0)
clusters = remove_redundant_clusters (clusters)
scores = score_clusters(clusters, X, Y,  deltadist=1.0)
o = order(scores[[criteria]])
scores = lapply(scores, "[", o)
clusters = clusters[o]
clusters
scores
help(order)
MINSCORE
scores$score[1]
scores$score[2]
length(clusters)
source("~/pepit/R/getBindingSite.R")
library(pepit)
library(pepit)
infile="inst/nanoBank.dat"
BSBANK="~/3D/PeptiDB/APDB_100/nanoBS/"
D=read.table(infile, header=TRUE)
D
i=1
id=as.character(D[i,1])
tchain=as.character(D[i,2])# a target chain is can be a list of chains (e.g. H,L)
lchain=as.character(D[i,3])
lchain=substring(lchain,1,1) #only one ligand chain
outfile=paste(BSBANK,"/",id,tchain,":",lchain,".pdb",sep="")
pdb=bio3d::read.pdb(id)
chainlist=unique(pdb$atom$chain)
tchain=unlist(strsplit(tchain,split=""))
tchain=intersect(tchain, chainlist)
tchain=setdiff(tchain, lchain)
pdb=bio3d::trim.pdb(pdb, string="protein")
pdb=bio3d::trim.pdb(pdb, string="noh")
pdb=type_atoms(pdb, ligchain=lchain) # ligchain is not typed
holo=access_atoms(pdb, chains=tchain, add=get.pepit("ADD"), minacc=10, select=FALSE)
pdb
tchains
tchain
get.pepit("ADD")
get.pepit("ACC")
get.pepit("radius")
chains=tchain
chains
minacc=get.pepit("ACC")
probeRadius = get.pepit("radius")
add=get.pepit("ADD")
pdb$atom$b[]=0 # otherwise all chain not in chains remains acc.
pdb=chain_surf_annotate(pdb, chains[1], minacc, probeRadius)
chain="C"
cat("chain_surf_extract=", chain, "\n")
fullpdb=pdb
cat("chain_surf_extract=", chain, "\n")
selchain=bio3d::atom.select(fullpdb, chain=chain)
pdb=bio3d::trim.pdb(fullpdb, chain=chain)
modified.pdb=SASA(pdb, probeRadius)# b-factors replaced by acc
modified.pdb$atom$b[modified.pdb$atom$b<minacc]=0
fullpdb$atom[selchain$atom,]=modified.pdb$atom
radius
radius=get.pepit("radius")
radius
result=vanddraabe::FreeSASA.diff(atoms.oi = pdb$atom, probeRadius = radius)
result
acc=result$SASA.prot
acc
x=strsplit(result$uniq.atom.ids,split="_")
x
for (i in 1:length(acc)) {
resno=as.integer(x[[i]][2])
chain=x[[i]][3]
eleno=as.integer(x[[i]][5])
ind=atom.select(pdb, resno=resno, chain=chain, eleno=eleno)
#ind=atom.select(pdb,  eleno=eleno)
pdb$atom[ind$atom,"b"]=acc[i]
}
library(bio3d)
for (i in 1:length(acc)) {
resno=as.integer(x[[i]][2])
chain=x[[i]][3]
eleno=as.integer(x[[i]][5])
ind=atom.select(pdb, resno=resno, chain=chain, eleno=eleno)
#ind=atom.select(pdb,  eleno=eleno)
pdb$atom[ind$atom,"b"]=acc[i]
}
pdb
modified.pdb=pdb
modified.pdb$atom$b[modified.pdb$atom$b<minacc]=0
fullpdb$atom[selchain$atom,]=modified.pdb$atom
id
pdb=bio3d::read.pdb(id)
chainlist=unique(pdb$atom$chain)
tchain=unlist(strsplit(tchain,split=""))
tchain=intersect(tchain, chainlist)
tchain=setdiff(tchain, lchain)
pdb=bio3d::trim.pdb(pdb, string="protein")
pdb=bio3d::trim.pdb(pdb, string="noh")
pdb=type_atoms(pdb, ligchain=lchain) # ligchain is not typed
holo=access_atoms(pdb, chains=tchain, add=get.pepit("ADD"), minacc=10, select=FALSE)
library(pepit)
x=get.pepit("radius")
x
typeof(x)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
bank="~/3D/PeptiDB/APDB_100/nanoBS/1cyzC:E.pdb"
file.exists(bank)
library(pepit)
bank
bank="~/3D/PeptiDB/APDB_100/nanoBS/1czyC:E.pdb"
file.exists(bank)
dir.exists(bank)
if (file.exists(bank) & dir.exists(bank)) { # if bank is directory of bs files
bslist = dir(bank)
bslist = paste(bank,"/",bslist,sep="")
} else if (file.exists(bank)) { # if bank is a bs file
bslist = bank
} else {
message("unknown bank")
q()
}
bank
bslist
library(pepit)
help(".First")
library(pepit)
library(pepit)
library(pepit)
library(pepit)
roxygen2::roxygenise()
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
superpose_sites
help(library)
library(pepit)

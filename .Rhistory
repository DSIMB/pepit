#score=D$alen/D$bslen
score=D$alen/D$prec
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=2",loc,scale,"\n")
print(par)
#D=read.table("peppro_2302.score", header=TRUE)# prec=2. dcontact=5
D=read.table("peppro_0604.score", header=TRUE)# prec=2.
D=D[D$meandist<=2,]
D=D[D$apo==0,]
#score=D$alen/D$bslen
score=D$alen/D$prec
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=2",loc,scale,"\n")
print(par)
D=read.table("peppro_0303.score", header=TRUE)# prec=1.
D=D[D$meandist<=2,]
#score1=D$alen
#score1=D$meandist
score1=D$alen/D$prec
score1n=score1[D$apo==0]
score1p=score1[D$apo==1]
D=read.table("peppro_1003.score", header=TRUE)# prec=1.5
D=D[D$meandist<=2,]
score1.5=D$alen/D$prec
score1.5n=score1.5[D$apo==0]
score1.5p=score1.5[D$apo==1]
#D=read.table("peppro_2302.score", header=TRUE)# prec=2. mais contact=5
D=read.table("peppro_0604.score", header=TRUE)# prec=2. contact=10
D=D[D$meandist<=2,]
score2=D$alen/D$prec
score2n=score2[D$apo==0]
score2p=score2[D$apo==1]
#boxplot(score1, score1.5, score2)
boxplot(score1n, score1p, score1.5n, score1.5p, score2n, score2p, names=c(1,1,1.5,1.5,2,2), xlab="Delta", ylab="normalized mean distortion",
col=c("pink","lightblue","pink","lightblue","pink","lightblue"))
legend(0.5,200, legend=c("negatives", "positives"), fill=c("pink", "lightblue"))
#boxplot(score1, score1.5, score2)
boxplot(score1n, score1p, score1.5n, score1.5p, score2n, score2p, names=c(1,1,1.5,1.5,2,2), xlab="Delta", ylab="normalized alignment length",
col=c("pink","lightblue","pink","lightblue","pink","lightblue"))
legend(0.5,200, legend=c("negatives", "positives"), fill=c("pink", "lightblue"))
#
#
#
D=read.table("peppro_0303.score", header=TRUE)# prec=1.
D=D[D$meandist<=2,]
D=D[D$apo==0,]
#score=D$alen/D$bslen
score=D$alen/D$prec
#score=D$alen/D$meandist
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=1",loc, scale,"\n")
print(par)
plot(density(score), ty="l",col="blue")
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="lightblue")
D=read.table("peppro_1003.score", header=TRUE)# prec=1.5
D=D[D$meandist<=2,]
D=D[D$apo==0,]
#score=D$alen/D$bslen
score=D$alen/D$prec
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=1.5",loc,scale,"\n")
print(par)
lines(density(score), ty="l",col="green")
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="lightgray")
#D=read.table("peppro_2302.score", header=TRUE)# prec=2. dcontact=5
D=read.table("peppro_0604.score", header=TRUE)# prec=2.
D=D[D$meandist<=2,]
D=D[D$apo==0,]
#score=D$alen/D$bslen
score=D$alen/D$prec
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=2",loc,scale,"\n")
print(par)
lines(density(score), ty="l",col="red")
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="pink")
#
#
#
D=read.table("peppro_0303.score", header=TRUE)# prec=1.
D=D[D$meandist<=2,]
D=D[D$apo==0,]
#score=D$alen/D$bslen
score=D$alen/D$prec
#score=D$alen/D$meandist
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=1",loc, scale,"\n")
print(par)
plot(density(score), ty="l",col="blue", xlim=c(0,50))
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="lightblue")
D=read.table("peppro_1003.score", header=TRUE)# prec=1.5
D=D[D$meandist<=2,]
D=D[D$apo==0,]
#score=D$alen/D$bslen
score=D$alen/D$prec
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=1.5",loc,scale,"\n")
print(par)
lines(density(score), ty="l",col="green")
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="lightgray")
#D=read.table("peppro_2302.score", header=TRUE)# prec=2. dcontact=5
D=read.table("peppro_0604.score", header=TRUE)# prec=2.
D=D[D$meandist<=2,]
D=D[D$apo==0,]
#score=D$alen/D$bslen
score=D$alen/D$prec
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=2",loc,scale,"\n")
print(par)
lines(density(score), ty="l",col="red")
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="pink")
#
#
#
D=read.table("peppro_0303.score", header=TRUE)# prec=1.
D=D[D$meandist<=2,]
D=D[D$apo==1,]
score=D$alen/D$bslen
#score=D$alen/D$prec
#score=D$alen/D$meandist
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=1",loc, scale,"\n")
print(par)
plot(density(score), ty="l",col="blue", xlim=c(0,50))
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="lightblue")
plot(density(score), ty="l",col="blue", xlim=c(0,1))
plot(density(score), ty="l",col="blue", xlim=c(0,1,2))
plot(density(score), ty="l",col="blue", xlim=c(0,1.2))
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="lightblue")
D=read.table("peppro_1003.score", header=TRUE)# prec=1.5
D=D[D$meandist<=2,]
D=D[D$apo==1,]
score=D$alen/D$bslen
#score=D$alen/D$prec
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=1.5",loc,scale,"\n")
print(par)
lines(density(score), ty="l",col="green")
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="lightgray")
#D=read.table("peppro_2302.score", header=TRUE)# prec=2. dcontact=5
D=read.table("peppro_0604.score", header=TRUE)# prec=2.
D=D[D$meandist<=2,]
D=D[D$apo==1,]
score=D$alen/D$bslen
#score=D$alen/D$prec
fit = fevd(score)
par = fit$result$par
scale = sqrt(6)/pi*sd(score)
loc = mean(score)+digamma(1)*scale
cat("prec=2",loc,scale,"\n")
print(par)
lines(density(score), ty="l",col="red")
curve(devd(x,par[1],par[2],par[3]),add=TRUE,col="pink")
D=read.table("peppro_0303.score", header=TRUE)# prec=1.
D=D[D$meandist<=2,]
score1=D$alen/D$bslen
#score1=D$meandist
#score1=D$alen/D$prec
score1n=score1[D$apo==0]
score1p=score1[D$apo==1]
D=read.table("peppro_1003.score", header=TRUE)# prec=1.5
D=D[D$meandist<=2,]
score1.5=D$alen/D$bslen
score1.5n=score1.5[D$apo==0]
score1.5p=score1.5[D$apo==1]
#D=read.table("peppro_2302.score", header=TRUE)# prec=2. mais contact=5
D=read.table("peppro_0604.score", header=TRUE)# prec=2. contact=10
D=D[D$meandist<=2,]
score2=D$alen/D$bslen
score2n=score2[D$apo==0]
score2p=score2[D$apo==1]
#boxplot(score1, score1.5, score2)
boxplot(score1n, score1p, score1.5n, score1.5p, score2n, score2p, names=c(1,1,1.5,1.5,2,2), xlab="Delta", ylab="normalized alignment length",
col=c("pink","lightblue","pink","lightblue","pink","lightblue"))
legend(0.5,200, legend=c("negatives", "positives"), fill=c("pink", "lightblue"))
legend(0.5,0.8, legend=c("negatives", "positives"), fill=c("pink", "lightblue"))
#boxplot(score1, score1.5, score2)
boxplot(score1n, score1p, score1.5n, score1.5p, score2n, score2p, names=c(1,1,1.5,1.5,2,2), xlab="Delta", ylab="normalized alignment length",
col=c("pink","lightblue","pink","lightblue","pink","lightblue"))
legend(0.2,0.9, legend=c("negatives", "positives"), fill=c("pink", "lightblue"))
#boxplot(score1, score1.5, score2)
boxplot(score1n, score1p, score1.5n, score1.5p, score2n, score2p, names=c(1,1,1.5,1.5,2,2), xlab="Delta", ylab="normalized alignment length",
col=c("pink","lightblue","pink","lightblue","pink","lightblue"))
legend(0.2,1, legend=c("negatives", "positives"), fill=c("pink", "lightblue"))
#boxplot(score1, score1.5, score2)
boxplot(score1n, score1p, score1.5n, score1.5p, score2n, score2p, names=c(1,1,1.5,1.5,2,2), xlab="Delta", ylab="coverage",
col=c("pink","lightblue","pink","lightblue","pink","lightblue"))
legend(0.2,1, legend=c("negatives", "positives"), fill=c("pink", "lightblue"))
library(pepit)
library(pepit)
library(pepit)
library(pepit)
cliques_ho2
cliques_ho
roxygen2::roxygenize(pepti)
roxygen2::roxygenize(pepit)
devtools::document(pkg = pepit)
devtools::document("pepit")
devtools::document("~/pepit")
warnings()
library(Rcpp)
cliques_h2
cliques_ho2
cliques_ho2
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
pepit::buildGraph_ho2
library(pepit)
library(pepit)
getwd()
setwd("~/3D/PatchSearch/Pepitho/")
hofile = "HO.pdb"
hochain = "B"
bank = "AB.pdb"
prefix = "test"
hopdb = read.pdb(hofile) # complex protein/residues
hopdb = bio3d::trim.pdb(hopdb, string="noh")
resid = trim.pdb(hopdb, chain=hochain)
library(bio3d)
hopdb = read.pdb(hofile) # complex protein/residues
hopdb = bio3d::trim.pdb(hopdb, string="noh")
resid = trim.pdb(hopdb, chain=hochain)
XResno = resid$atom$resno
o = order(XResno)
N = length(XResno) # ??
resid$atom = resid$atom[o,]
X = resid$atom[,c("x","y","z")]
X = as.matrix(X)
XProp = resid$atom$elesy
XResname = aa321(resid$atom$resid)
XResno = resid$atom$resno
XResInd=which(!duplicated(XResno))
Nres=length(XResInd)
XResInd[Nres+1]=N+1
if (file.exists(bank) & dir.exists(bank)) { # if bank is directory of pdb files with surface annontation and with only one chain
slist = dir(bank)
slist = paste(bank,"/",slist,sep="")
} else if (file.exists(bank)) { # if bank is a bs file
slist = bank
} else {
message("unknown bank")
q()
}
deltadist = get.pepit("PRECISION")
sfile=slist
cat("sfile =", sfile,"\n")
spdbfull = read.pdb(sfile)
spdbfull = trim.pdb(spdbfull, string="protein")
chains = unique(spdbfull$atom$chain)
ch="L"
spdb = trim.pdb(spdbfull, chain=ch)
YResno = spdb$atom$resno
o = order(YResno)
spdb$atom = spdb$atom[o,]
Y = spdb$atom[,c("x","y","z")]
Y = as.matrix(Y)
YProp = spdb$atom$elesy
YResname = aa321(spdb$atom$resid)
YResInd=which(!duplicated(YResno))
Mres=length(YResInd)
YResInd[Mres+1]=length(YResno)+1
XResInd
I=XResInd
J=YResInd
V=vertex_ho2(XResno[I], XResname[I], YResno[J], YResname[J])
V
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
V
i=1;j=2
V[i,]
YResInd[16]-YResInd[15]+1
XResname
XResInd[2]-XResInd[1]+1
XResname[XResInd[1]]
YResname[YResInd[15]]
YResno[YResInd[15]]
XResno[XResInd[1]]
resid$atom
XResInd[1]
XResInd[2]
YResInd[15]
spdb$atom
resid$atom
spdb = bio3d::trim.pdb(spdb, string="noh")
spdbfull = trim.pdb(spdbfull, string="protein")
spdb = trim.pdb(spdbfull, chain=ch)
YResno = spdb$atom$resno
o = order(YResno)
spdb$atom = spdb$atom[o,]
Y = spdb$atom[,c("x","y","z")]
Y = as.matrix(Y)
YProp = spdb$atom$elesy
YResname = aa321(spdb$atom$resid)
YResInd=which(!duplicated(YResno))
Mres=length(YResInd)
YResInd[Mres+1]=length(YResno)+1
I=XResInd
J=YResInd
V=vertex_ho2(XResno[I], XResname[I], YResno[J], YResname[J])
V
XResInd[2]-XResInd[1]+1
XResInd[2]-XResInd[1]
YResInd[16]-YResInd[15]
spdbfull = read.pdb(sfile)
spdb = bio3d::trim.pdb(spdb, string="noh")
spdbfull = trim.pdb(spdbfull, string="protein")
chains = unique(spdbfull$atom$chain)
spdbfull = read.pdb(sfile)
spdb = bio3d::trim.pdb(spdbfull, string="noh")
spdbfull = trim.pdb(spdbfull, string="protein")
chains = unique(spdbfull$atom$chain)
spdb = trim.pdb(spdbfull, chain=ch)
YResno = spdb$atom$resno
o = order(YResno)
spdb$atom = spdb$atom[o,]
Y = spdb$atom[,c("x","y","z")]
Y = as.matrix(Y)
YProp = spdb$atom$elesy
YResname = aa321(spdb$atom$resid)
YResInd=which(!duplicated(YResno))
Mres=length(YResInd)
YResInd[Mres+1]=length(YResno)+1
YResInd[16]-YResInd[15]
spdbfull = read.pdb(sfile)
spdbfull = bio3d::trim.pdb(spdbfull, string="noh")
spdbfull = trim.pdb(spdbfull, string="protein")
chains = unique(spdbfull$atom$chain)
spdb = trim.pdb(spdbfull, chain=ch)
YResno = spdb$atom$resno
o = order(YResno)
spdb$atom = spdb$atom[o,]
Y = spdb$atom[,c("x","y","z")]
Y = as.matrix(Y)
YProp = spdb$atom$elesy
YResname = aa321(spdb$atom$resid)
YResInd=which(!duplicated(YResno))
Mres=length(YResInd)
YResInd[Mres+1]=length(YResno)+1
YResInd[16]-YResInd[15]
XResInd[2]-XResInd[1]
V=vertex_ho2(XResno[I], XResname[I], YResno[J], YResname[J])
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
I=XResInd[-length(XResInd)]
J=YResInd[-length(YResInd)]
Nres=length(I)
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
E
V
XResname
YResname
V
I
V=vertex_ho2(XResno[I], XResname[I], YResno[J], YResname[J])
V
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
E
library(pepit)
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
V
XResInd
library(pepit)
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
I
J
V
XResInd
E
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
I
I=XResInd
J=YResInd
I
J
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
E
library(pepit)
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
E
V
maxgap
library(pepit)
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
E
78 104 4 1
V
YResno[78]
XResname[YResno[78]]
YResname[YResInd[15]]
YResname[YResno[78]]
XResname[XResno[4]]
XResname[XResno[XResInd[4]]
]
78 104 4 1
XResInd[4]
XResname[XResInd[4]]
YResname[YResInd[78]]
YResInd[79]-YResInd[78]
XResInd[5]-XResInd[4]
resid$atom[35:43,]
resid$atom[35:42,]
YResInd[78]
spdb$atom[566:573,]
library(pepit)
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
E
#V=cbind(J[V[,1]],I[V[,2]]) # residue indices 1..M, 1..N
#nV=nrow(V)
E=buildGraph_ho2(X, XResno, I, Y, YResno, J, V, as.double(deltadist), get.pepit("AAGAP"))
E=buildGraph_ho2(X, XResno, XResInd, Y, YResno, YResInd, V, as.double(5.), get.pepit("AAGAP"))
E
E=buildGraph_ho2(X, XResno, XResInd, Y, YResno, YResInd, V, as.double(10.), get.pepit("AAGAP"))
E
library(pepit)
E=buildGraph_ho2(X, XResno, XResInd, Y, YResno, YResInd, V, as.double(10.), get.pepit("AAGAP"))
E
E=buildGraph_ho2(X, XResno, XResInd, Y, YResno, YResInd, V, as.double(1.), get.pepit("AAGAP"))
E
E=buildGraph_ho2(X, XResno, XResInd, Y, YResno, YResInd, V, as.double(1.), get.pepit("AAGAP"))
E
library(pepit)
E=buildGraph_ho2(X, XResno, XResInd, Y, YResno, YResInd, V, as.double(1.), get.pepit("AAGAP"))
E
library(pepit)
library(pepit)
E=buildGraph_ho2(X, XResno, XResInd, Y, YResno, YResInd, V, as.double(1.), get.pepit("AAGAP"))
E
E=buildGraph_ho2(X, XResno, XResInd, Y, YResno, YResInd, V, as.double(1.), get.pepit("AAGAP"))
E=buildGraph_ho2(X, XResno, XResInd, Y, YResno, YResInd, V, as.double(10.), get.pepit("AAGAP"))
E
cat("---> edges:",nrow(E),"\n")
I=XResInd[-length(XResInd)]
J=YResInd[-length(YResInd)]
N=length(I)
N
P=cbind((E[,3]-1)*N+E[,1],(E[,4]-1)*N+E[,2])
mode(P)="character" #vertex label and not id to avoid huge graphs with non connected nodes
gp=igraph::graph.edgelist(P, directed=FALSE)
graph=gp
#
# recherche des cliques
#
cliques=pepit_cliques(graph, X[XResInd], Y[YResInd], get.pepit("MINCLIQUE"), get.pepit("BCMIN"))
source("~/pepit/R/computeCliques.R")
#
# recherche des cliques
#
cliques=pepit_cliques(graph, X[XResInd], Y[YResInd], get.pepit("MINCLIQUE"), get.pepit("BCMIN"))
graph
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)

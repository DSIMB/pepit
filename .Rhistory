imax = which.max(mcc)
#imax = which.min(D$meandist)
mccs = c(mccs, mcc[imax])
senss = c(senss, prec[imax])
specs = c(specs, spec[imax])
}
mean(senss)
mean(specs)
mean(mccs)
senss = c()
specs = c()
mccs = c()
for (k in 1:length(ind)) {
target.id = target.ids[k]
target.chain = target.chains[k]
pep.chain = pep.chains[k]
pdb = read.pdb(target.id)
target = trim(pdb, chain=target.chain, string="notwater")
pep = trim(pdb, chain=pep.chain)
bs = binding.site(a=target, b=pep, cutoff=8.0)
target.data = encode(target)
resno = target.data$resno[bs$inds$atom]
insert = target.data$insert[bs$inds$atom]
insert[is.na(insert)] = ""
chain = target.data$chain[bs$inds$atom]
if(0) {
ind = which(target.data$hseu<=10 | target.data$hsed<=10)
resno = resno[ind]
insert = insert[ind]
chain = chain[ind]
}
target.data$insert[is.na(target.data$insert)] = ""
allres = unique(paste(target.data$resno, target.data$insert, target.data$chain, sep=""))
truebs = unique(paste(resno, insert, chain, sep=""))
falsebs = setdiff(allres, truebs)
D = read.table(paste("~/3D/PepPro/", target.id,".resi",sep=""), header=TRUE)
pred = list()
for (i in unique(D[,1])) {
ind = which(D[,1] == i)
pred[[i]] = D$residue[ind]
}
D = read.table(paste("~/3D/PepPro/", target.id,".score",sep=""), header=TRUE)
prec = c()
spec = c()
mcc = c()
at = length(truebs)
af = length(falsebs)
for (i in 1: length(pred)) {
tp = length(intersect(truebs, pred[[i]]))
fp = length(intersect(falsebs, pred[[i]]))
fn = at - tp
tn = af - fp
prec = c(prec,  tp/at)
spec = c(spec, tn/af)
mcc = c(mcc, (tp*tn-fp*fn)/sqrt(at*af*(tp+fp)*(fn+tn)))
}
#imax = which.max(mcc)
imax = which.max(D$score)
mccs = c(mccs, mcc[imax])
senss = c(senss, prec[imax])
specs = c(specs, spec[imax])
}
mean(senss)
mean(specs)
mean(mccs)
pred.score = function(pred, allres) {
score = double(length(allres))
for (r in 1:length(allres)) {
sc = 0
for (i in 1:length(pred)) {
sc = sc + allres[r]%in%pred[[i]]
}
score[r] = sc
}
names(score) = allres
pred_score = double(length(pred))
for (i in 1:length(pred)) {
pred_score[i] = sum(score[pred[[i]]])
}
pred_score
}
senss = c()
specs = c()
mccs = c()
for (k in 1:length(ind)) {
target.id = target.ids[k]
target.chain = target.chains[k]
pep.chain = pep.chains[k]
pdb = read.pdb(target.id)
target = trim(pdb, chain=target.chain, string="notwater")
pep = trim(pdb, chain=pep.chain)
bs = binding.site(a=target, b=pep, cutoff=8.0)
target.data = encode(target)
resno = target.data$resno[bs$inds$atom]
insert = target.data$insert[bs$inds$atom]
insert[is.na(insert)] = ""
chain = target.data$chain[bs$inds$atom]
if(0) {
ind = which(target.data$hseu<=10 | target.data$hsed<=10)
resno = resno[ind]
insert = insert[ind]
chain = chain[ind]
}
target.data$insert[is.na(target.data$insert)] = ""
allres = unique(paste(target.data$resno, target.data$insert, target.data$chain, sep=""))
truebs = unique(paste(resno, insert, chain, sep=""))
falsebs = setdiff(allres, truebs)
D = read.table(paste("~/3D/PepPro/", target.id,".resi",sep=""), header=TRUE)
pred = list()
for (i in unique(D[,1])) {
ind = which(D[,1] == i)
pred[[i]] = D$residue[ind]
}
D = read.table(paste("~/3D/PepPro/", target.id,".score",sep=""), header=TRUE)
prec = c()
spec = c()
mcc = c()
at = length(truebs)
af = length(falsebs)
for (i in 1: length(pred)) {
tp = length(intersect(truebs, pred[[i]]))
fp = length(intersect(falsebs, pred[[i]]))
fn = at - tp
tn = af - fp
prec = c(prec,  tp/at)
spec = c(spec, tn/af)
mcc = c(mcc, (tp*tn-fp*fn)/sqrt(at*af*(tp+fp)*(fn+tn)))
}
pred_score = pred.score(pred, allres)
imax = which.max(pred_score)
#imax = which.max(mcc)
#imax = which.max(D$score)
mccs = c(mccs, mcc[imax])
senss = c(senss, prec[imax])
specs = c(specs, spec[imax])
}
mean(senss)
mean(specs)
mean(mccs)
head(D)
D = read.table(paste("~/3D/PepPro/", target.id,".resi",sep=""), header=TRUE)
head(D)
allres
allres[1]
allres[1]%in%pred
allres[1]%in%pred[[1]]
sum(pred[[1]]%in%allres)
length(pred[[1]])
lapply(pred, function(x) 	D = read.table(paste("~/3D/PepPro/", target.id,".resi",sep=""), header=TRUE)
)
D$index
allres[1]
sum(allres[1]%in%D$residu)
D$residue
sum(allres[1]%in%D$residue)
sum(allres[2]%in%D$residue)
sum(allres[10]%in%D$residue)
score
sum("1156C"%in%D$residue)
length(score)
allres[153]
score = double(length(allres))
for (r in 1:length(allres)) {
sc = 0
for (i in 1:length(pred)) {
sc = sc + (allres[r]%in%pred[[i]])
}
score[r] = sc
}
names(score) = allres
score
length(score)
allres[262]
sum("271A"%in%D$residue)
sum("270A"%in%D$residue)
sum(D$residue%in%"270A")
sum(D$residue%in%"271A")
sum(D$residue%in%"261A")
pred.score = function(pred, allres, Dresid) {
score = double(length(allres))
for (r in 1:length(allres)) {
score[r] = sum(Dresid$residue%in%allres[r])
}
names(score) = allres
pred_score = double(length(pred))
for (i in 1:length(pred)) {
pred_score[i] = sum(score[pred[[i]]]>2)
}
pred_score
}
pred.score = function(pred, allres, Dresid) {
score = double(length(allres))
for (r in 1:length(allres)) {
score[r] = sum(Dresid$residue%in%allres[r])
}
names(score) = allres
pred_score = double(length(pred))
for (i in 1:length(pred)) {
pred_score[i] = sum(score[pred[[i]]]>2)
}
pred_score
}
senss = c()
specs = c()
mccs = c()
for (k in 1:length(ind)) {
target.id = target.ids[k]
target.chain = target.chains[k]
pep.chain = pep.chains[k]
pdb = read.pdb(target.id)
target = trim(pdb, chain=target.chain, string="notwater")
pep = trim(pdb, chain=pep.chain)
bs = binding.site(a=target, b=pep, cutoff=8.0)
target.data = encode(target)
resno = target.data$resno[bs$inds$atom]
insert = target.data$insert[bs$inds$atom]
insert[is.na(insert)] = ""
chain = target.data$chain[bs$inds$atom]
if(0) {
ind = which(target.data$hseu<=10 | target.data$hsed<=10)
resno = resno[ind]
insert = insert[ind]
chain = chain[ind]
}
target.data$insert[is.na(target.data$insert)] = ""
allres = unique(paste(target.data$resno, target.data$insert, target.data$chain, sep=""))
truebs = unique(paste(resno, insert, chain, sep=""))
falsebs = setdiff(allres, truebs)
Dresid = read.table(paste("~/3D/PepPro/", target.id,".resi",sep=""), header=TRUE)
rscore = Dresid$score
pred = list()
for (i in unique(Dresid[,1])) {
ind = which(Dresid[,1] == i)
pred[[i]] = Dresid$residue[ind]
}
D = read.table(paste("~/3D/PepPro/", target.id,".score",sep=""), header=TRUE)
prec = c()
spec = c()
mcc = c()
at = length(truebs)
af = length(falsebs)
for (i in 1: length(pred)) {
tp = length(intersect(truebs, pred[[i]]))
fp = length(intersect(falsebs, pred[[i]]))
fn = at - tp
tn = af - fp
prec = c(prec,  tp/at)
spec = c(spec, tn/af)
mcc = c(mcc, (tp*tn-fp*fn)/sqrt(at*af*(tp+fp)*(fn+tn)))
}
pred_score = pred.score(pred, allres, Dresid)
imax = which.max(pred_score)
#imax = which.max(mcc)
#imax = which.max(D$score)
mccs = c(mccs, mcc[imax])
senss = c(senss, prec[imax])
specs = c(specs, spec[imax])
}
mean(senss)
mean(specs)
mean(mccs)
score = double(length(allres))
for (r in 1:length(allres)) {
score[r] = sum(Dresid$residue%in%allres[r])
}
names(score) = allres
pred_score = double(length(pred))
for (i in 1:length(pred)) {
pred_score[i] = sum(score[pred[[i]]]>2)
}
pred_score
sum(score[pred[[i]]])
sum(score[pred[[i]]]>2)
sum(score[pred[[i]]]>10)
score = double(length(allres))
for (r in 1:length(allres)) {
score[r] = sum(Dresid$residue%in%allres[r])
}
names(score) = allres
pred_score = double(length(pred))
for (i in 1:length(pred)) {
pred_score[i] = sum(score[pred[[i]]]>10)
}
pred_score
score
pred[[1]]
score[pred[[1]]]
sum(score[pred[[1]]]>4)
pred.score = function(pred, allres, Dresid) {
score = double(length(allres))
for (r in 1:length(allres)) {
score[r] = sum(Dresid$residue%in%allres[r])
}
names(score) = allres
pred_score = double(length(pred))
for (i in 1:length(pred)) {
pred_score[i] = sum(score[pred[[i]]]>4)
}
pred_score
}
senss = c()
specs = c()
mccs = c()
for (k in 1:length(ind)) {
target.id = target.ids[k]
target.chain = target.chains[k]
pep.chain = pep.chains[k]
pdb = read.pdb(target.id)
target = trim(pdb, chain=target.chain, string="notwater")
pep = trim(pdb, chain=pep.chain)
bs = binding.site(a=target, b=pep, cutoff=8.0)
target.data = encode(target)
resno = target.data$resno[bs$inds$atom]
insert = target.data$insert[bs$inds$atom]
insert[is.na(insert)] = ""
chain = target.data$chain[bs$inds$atom]
if(0) {
ind = which(target.data$hseu<=10 | target.data$hsed<=10)
resno = resno[ind]
insert = insert[ind]
chain = chain[ind]
}
target.data$insert[is.na(target.data$insert)] = ""
allres = unique(paste(target.data$resno, target.data$insert, target.data$chain, sep=""))
truebs = unique(paste(resno, insert, chain, sep=""))
falsebs = setdiff(allres, truebs)
Dresid = read.table(paste("~/3D/PepPro/", target.id,".resi",sep=""), header=TRUE)
rscore = Dresid$score
pred = list()
for (i in unique(Dresid[,1])) {
ind = which(Dresid[,1] == i)
pred[[i]] = Dresid$residue[ind]
}
D = read.table(paste("~/3D/PepPro/", target.id,".score",sep=""), header=TRUE)
prec = c()
spec = c()
mcc = c()
at = length(truebs)
af = length(falsebs)
for (i in 1: length(pred)) {
tp = length(intersect(truebs, pred[[i]]))
fp = length(intersect(falsebs, pred[[i]]))
fn = at - tp
tn = af - fp
prec = c(prec,  tp/at)
spec = c(spec, tn/af)
mcc = c(mcc, (tp*tn-fp*fn)/sqrt(at*af*(tp+fp)*(fn+tn)))
}
pred_score = pred.score(pred, allres, Dresid)
imax = which.max(pred_score)
#imax = which.max(mcc)
#imax = which.max(D$score)
mccs = c(mccs, mcc[imax])
senss = c(senss, prec[imax])
specs = c(specs, spec[imax])
}
mean(senss)
mean(specs)
mean(mccs)
pred.score = function(pred, allres, Dresid) {
score = double(length(allres))
for (r in 1:length(allres)) {
score[r] = sum(Dresid$residue%in%allres[r])
}
names(score) = allres
pred_score = double(length(pred))
for (i in 1:length(pred)) {
pred_score[i] = sum(score[pred[[i]]])
}
pred_score
}
pred.score = function(pred, allres, Dresid) {
score = double(length(allres))
for (r in 1:length(allres)) {
score[r] = sum(Dresid$residue%in%allres[r])
}
names(score) = allres
pred_score = double(length(pred))
for (i in 1:length(pred)) {
pred_score[i] = sum(score[pred[[i]]])
}
pred_score
}
for (k in 1:length(ind)) {
target.id = target.ids[k]
target.chain = target.chains[k]
pep.chain = pep.chains[k]
pdb = read.pdb(target.id)
target = trim(pdb, chain=target.chain, string="notwater")
pep = trim(pdb, chain=pep.chain)
bs = binding.site(a=target, b=pep, cutoff=8.0)
target.data = encode(target)
resno = target.data$resno[bs$inds$atom]
insert = target.data$insert[bs$inds$atom]
insert[is.na(insert)] = ""
chain = target.data$chain[bs$inds$atom]
if(0) {
ind = which(target.data$hseu<=10 | target.data$hsed<=10)
resno = resno[ind]
insert = insert[ind]
chain = chain[ind]
}
target.data$insert[is.na(target.data$insert)] = ""
allres = unique(paste(target.data$resno, target.data$insert, target.data$chain, sep=""))
truebs = unique(paste(resno, insert, chain, sep=""))
falsebs = setdiff(allres, truebs)
Dresid = read.table(paste("~/3D/PepPro/", target.id,".resi",sep=""), header=TRUE)
rscore = Dresid$score
pred = list()
for (i in unique(Dresid[,1])) {
ind = which(Dresid[,1] == i)
pred[[i]] = Dresid$residue[ind]
}
D = read.table(paste("~/3D/PepPro/", target.id,".score",sep=""), header=TRUE)
prec = c()
spec = c()
mcc = c()
at = length(truebs)
af = length(falsebs)
for (i in 1: length(pred)) {
tp = length(intersect(truebs, pred[[i]]))
fp = length(intersect(falsebs, pred[[i]]))
fn = at - tp
tn = af - fp
prec = c(prec,  tp/at)
spec = c(spec, tn/af)
mcc = c(mcc, (tp*tn-fp*fn)/sqrt(at*af*(tp+fp)*(fn+tn)))
}
pred_score = pred.score(pred, allres, Dresid)
imax = which.min(pred_score)
#imax = which.max(mcc)
#imax = which.max(D$score)
mccs = c(mccs, mcc[imax])
senss = c(senss, prec[imax])
specs = c(specs, spec[imax])
}
mean(senss)
mean(specs)
mean(mccs)
senss = c()
specs = c()
mccs = c()
for (k in 1:length(ind)) {
target.id = target.ids[k]
target.chain = target.chains[k]
pep.chain = pep.chains[k]
pdb = read.pdb(target.id)
target = trim(pdb, chain=target.chain, string="notwater")
pep = trim(pdb, chain=pep.chain)
bs = binding.site(a=target, b=pep, cutoff=8.0)
target.data = encode(target)
resno = target.data$resno[bs$inds$atom]
insert = target.data$insert[bs$inds$atom]
insert[is.na(insert)] = ""
chain = target.data$chain[bs$inds$atom]
if(0) {
ind = which(target.data$hseu<=10 | target.data$hsed<=10)
resno = resno[ind]
insert = insert[ind]
chain = chain[ind]
}
target.data$insert[is.na(target.data$insert)] = ""
allres = unique(paste(target.data$resno, target.data$insert, target.data$chain, sep=""))
truebs = unique(paste(resno, insert, chain, sep=""))
falsebs = setdiff(allres, truebs)
Dresid = read.table(paste("~/3D/PepPro/", target.id,".resi",sep=""), header=TRUE)
rscore = Dresid$score
pred = list()
for (i in unique(Dresid[,1])) {
ind = which(Dresid[,1] == i)
pred[[i]] = Dresid$residue[ind]
}
D = read.table(paste("~/3D/PepPro/", target.id,".score",sep=""), header=TRUE)
prec = c()
spec = c()
mcc = c()
at = length(truebs)
af = length(falsebs)
for (i in 1: length(pred)) {
tp = length(intersect(truebs, pred[[i]]))
fp = length(intersect(falsebs, pred[[i]]))
fn = at - tp
tn = af - fp
prec = c(prec,  tp/at)
spec = c(spec, tn/af)
mcc = c(mcc, (tp*tn-fp*fn)/sqrt(at*af*(tp+fp)*(fn+tn)))
}
#pred_score = pred.score(pred, allres, Dresid)
#imax = which.min(pred_score)
#imax = which.max(mcc)
#imax = which.max(D$score)
imax = which.max(D$alen)
mccs = c(mccs, mcc[imax])
senss = c(senss, prec[imax])
specs = c(specs, spec[imax])
}
mean(senss)
mean(specs)
mean(mccs)
curve(x*log(x),0,1)
abline(h=0)
curve(x*log(x),0,2)
abline(h=0)
library(pepit)
get.pepit("CONTACT")
library(pepit)
get.pepit("CONTACT")
debugSource("~/pepit/inst/BuiltBSBank.R")
library(pepit)
get.pepit("CONTACT")
library(pepit)
get.pepit("CONTACT")

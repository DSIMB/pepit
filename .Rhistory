types
types=c("A", "N")
J=which(YProp$elety %in% types)
I=which(XProp$elety %in% types)
I
J
V=vertex(XProp[I,], YProp[J,], length(I)*length(J), mode=0)
V
XProp$elety[V[,2]]
V=cbind(J[V[,1]],I[V[,2]]) # atom ids 1..M, 1..N
XProp$elety[V[,2]]
x=XProp$elety[V[,2]]
y=YProp$elety[V[,1]]
length(x)
length(y)
all(x==y)
V=vertex(XProp[I,], YProp[J,], length(I)*length(J), mode=1)
dim(V)
x=XProp$elety[V[,2]]
y=YProp$elety[V[,1]]
all(x==y)
V=cbind(J[V[,1]],I[V[,2]]) # atom ids 1..M, 1..N
x=XProp$elety[V[,2]]
y=YProp$elety[V[,1]]
all(x==y)
x=XProp$hseu[V[,2]]
y=YProp$hseu[V[,1]]
x
y
all(x>10 & y>10)
x[1:20]
y[1:20]
plot(x,y)
abline(h=10, v=10)
all(x>=10 & y>=10)
x>=10
y>=10
which(!(x>=10 & y>=10)
)
ind = which(!(x>=10 & y>=10))
x[ind]
y[ind]
all((x>=10 & y>=10) | (x<10 & y<10))
dim(V)
library(pepit)
V=vertex(XProp[I,], YProp[J,], length(I)*length(J), mode=1)
dim(V)
strcmp("aa","aa")
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
source("~/pepit/inst/pepit2.R")
library(pepit)
help("writeLines")
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
setwd("~/3D/PepPro")
allscorefile="3lu9all.score"
#
# sort results for best scores and or p-value (scores here)
#
D = read.table(allscorefile, header=TRUE)
head(D)
#
# sorts output of pose files
#
noclash = D$clashes<=get.pepit("MAXCLASHES")
library(pepit)
#
# sorts output of pose files
#
noclash = D$clashes<=get.pepit("MAXCLASHES")
noclash
D = D[noclash,]
o = order(D$score, decreasing=TRUE)#
D = D[o, ]
nbhits = min(get.pepit("NBHITS"), nrow(D))
nrow(D)
nbhits
nbhits
Lresid = readLines(residfile)
residfile="3lu9.resi"
residfile
Lresid = readLines(residfile)
head(D)
unlink(residfile)
for (k in 1:nrow(D)) {
i = D$index[k]
cat(">", k, D[k,-1], file=residfile, append=TRUE)
cat(Lresid[i],"\n", file=residfile, append=TRUE)
}
k
D[1,]
as.chacter(D[1,])
as.character(D[1,])
for (k in 1:nrow(D)) {
i = D$index[k]
cat(">", k, as.character(D[k,-1]), file=residfile, append=TRUE)
cat(Lresid[i],"\n", file=residfile, append=TRUE)
}
Lalign = readLines(alignfile)
alignfile="3lu9.al"
Lalign = readLines(alignfile)
unlink(alignfile)
for (k in 1:nrow(D)) {
i = D$index-1
cat(">", k,  as.character(D[k,-1]), "\n", file=alignfile, append=TRUE)
cat(Lalign[(3*i+1):(3*i+3)], sep="\n", file=alignfile, append=TRUE)
}
warnings()
for (k in 1:nrow(D)) {
i = D$index[k]-1
cat(">", k,  as.character(D[k,-1]), "\n", file=alignfile, append=TRUE)
cat(Lalign[(3*i+1):(3*i+3)], sep="\n", file=alignfile, append=TRUE)
}
unlink(alignfile)
for (k in 1:nrow(D)) {
i = D$index[k]-1
cat(">", k,  as.character(D[k,-1]), "\n", file=alignfile, append=TRUE)
cat(Lalign[(3*i+2):(3*i+3)], sep="\n", file=alignfile, append=TRUE)
}
for (k in 1:nrow(D)) {
pepfile = paste(prefix, "-", D[k,"index"], ".pdb", sep="")
if (!file.exists(pepfile)) next
newfile = paste(prefix, "_peptide","-", k, ".pdb", sep="")
command = paste("mv ", pepfile, " ", newfile, sep="")
cat(command,"\n")
system(command)
}
prefix="3lu9"
for (k in 1:nrow(D)) {
pepfile = paste(prefix, "-", D[k,"index"], ".pdb", sep="")
if (!file.exists(pepfile)) next
newfile = paste(prefix, "_peptide","-", k, ".pdb", sep="")
command = paste("mv ", pepfile, " ", newfile, sep="")
cat(command,"\n")
system(command)
}
getwd()
setwd("../Sugar")
bank="CBS_bank"
bslist = dir(bank, pattern=".dat")
bslist
bsfile=bslist[1]
bsfile
pos = min(gregexpr(":", bsfile)[[1]])
pos
pepchain = substring(bsfile, pos+1, pos+1)
pepchain
#bsid = substring(basename(bsfile),1,4)
bsid = tools::file_path_sans_ext(bsfile)
bsid
#pepfile = paste(dirname(bsfile), "/",bsid, pepchain, ".pdb", sep="")
pepfile = paste(dirname(bsfile), "/",bsid, "-sugar", ".pdb", sep="")
cat("pepfile=", pepfile, "\n")
peptide = bio3d::read.pdb(pepfile)
help("next")
source("~/pepit/inst/BuiltBSBank.R")
getwd()
infile="bank.dat"
BSBANK="Bank"
#
# user defined parameters
#
set.pepit("CONTACT", 8.0)
set.pepit("ADD", "calpha")
set.pepit("HSECUTOFF", 13)
D=read.table(infile, header=TRUE)
D
i=1
id=as.character(D[i,1])
pdb=bio3d::read.pdb(id)
tchain=as.character(D[i,2])# a target chain can be a list of chains (e.g. H,L)
lchain=as.character(D[i,3])
lchain=substring(lchain,1,1) #only one ligand chain
outfile=paste(BSBANK,"/",id,tchain,":",lchain,".dat",sep="")
outfile
chainlist=unique(pdb$atom$chain)
chainlist
tchain=unlist(strsplit(tchain,split=""))
tchain=intersect(tchain, chainlist)
tchain=setdiff(tchain, lchain)
tchain
pdb=bio3d::trim.pdb(pdb, string="protein")
pdb=bio3d::trim.pdb(pdb, string="noh")
pdb=bio3d::read.pdb(id)
tchain
lchain
inds = get_binding_sites_2(pdb, target_chains=tchain, ligand_chains=lchain, add=get.pepit("ADD"))
for (ch in tchain) {
target.pdb=bio3d::trim.pdb(pdb, chain=ch)
target.data = encode(target.pdb)
eleno = pdb$atom$eleno[inds$atom]
target.data = target.data[target.data$eleno%in%eleno,]
cat("outfile=", outfile, file.exists(outfile),"\n")
col = ifelse(file.exists(outfile), FALSE, TRUE)
write.table(target.data, quote=FALSE, col.names = col, row.names=FALSE, file=outfile, append=TRUE) #
}
warnings()
id = substring(id,1,4)
ligand.pdb = bio3d::trim.pdb(pdb, chain=lchain)
outfile=paste(BSBANK,"/",id,lchain,".pdb",sep="")
bio3d::write.pdb(ligand.pdb, file=outfile)
ligand.pdb
lchain
pdb=bio3d::read.pdb(id)
pdb
ligand.pdb = bio3d::trim.pdb(pdb, chain=lchain)
ligand.pdb
pdb
s = read.pdb("3irl")
library(bio3d)
s = read.pdb("3irl")
s
s$atom
help("atom.select")
pdb = trim(pdb, string="ligand")
pdb
s = trim(s, string="ligand")
s
s$seqres
s$calpha
library(pepit)
id
pdb=bio3d::read.pdb(id)
tchain
lchain
ligand.pdb = bio3d::trim.pdb(pdb, chain=lchain)
ligand.pdb
id
pdb$atom
ligand.pdb
lchain
pdb$atom$chain
pdb=bio3d::read.pdb(id)
pdb$atom$chain
unique(pdb$atom$chain)
pdb$atom
pdb$atom[501:511,]
pdb$atom$resno
pdb$atom[1000:1200,]
pdb$atom[1200:1400,]
pdb$atom[1500:1700,]
pdb$atom[1500:1600,]
ligand=trim(pdb, string="notprotein")
ligand$atom
pdb=read.cif(id)
ligand=trim(pdb, string="notprotein")
ligand$atom
A=matrix(rnorm(100),10,10)
A=A+t(A)
eigen(A)$vectors
eigen(A)$values
max(diag(A))
diag(A)=0
max(A)
2.133494-3.080305
ligand
help(binding.site)
pdb
trim.pdb(pdb, chain="A", resno=501)
trim.pdb(pdb, chain="A", resno=NULL)
library(pepit)
id
infile
BSBANK
D=read.table(infile, header=TRUE)
D
if (ncol(D) == 4) resid.mode = TRUE
resid.mode
i=1
id=as.character(D[i,1])
pdb=bio3d::read.pdb(id)
tchain=as.character(D[i,2])# a target chain can be a list of chains (e.g. H,L)
lchain=as.character(D[i,3])
lchain=substring(lchain,1,1) #only one ligand chain
outfile=paste(BSBANK,"/",id,tchain,":",lchain,".dat",sep="")
tchain
lchain
D=read.table(infile, header=TRUE)
lchain=as.character(D[i,3])
lchain=substring(lchain,1,1) #only one ligand chain
outfile=paste(BSBANK,"/",id,tchain,":",lchain,".dat",sep="")
lchain
outfile
#pdb=bio3d::trim.pdb(pdb, string="protein")
pdb=bio3d::trim.pdb(pdb, string="noh")
chains=unique(pdb$atom$chain)
tchains=intersect(tchains, chains)
chains
tchain=intersect(tchain, chains)
lchain=intersect(lchain, setdiff(chains, tchain))
lchain
length(lchains)==0
length(lchain)==0
#inds = get_binding_sites_2(pdb, target_chains=tchain, ligand_chains=lchain, add=get.pepit("ADD"))
target.pdb = bio3d::trim.pdb(pdb, chain=tchain, string="protein")
atom.select(target.pdb, resno=501)
res = NULL
if (resid.mode) {
res = as.integer(unlist(strsplit(D[i,4], split=",")))
}
ligand.pdb = bio3d::trim.pdb(pdb, chain=lchain, resno=res)
res
ligand.pdb
lchain
ligand.pdb = bio3d::trim.pdb(pdb, chain="A", resno=res)
lchain
ligand.pdb
ligand.pdb = bio3d::trim.pdb(pdb, chain="A", resno=NULL)
ligand.pdb
D=read.table(infile, header=TRUE)
i
id=as.character(D[i,1])
pdb=bio3d::read.pdb(id)
tchain=as.character(D[i,2])# a target chain can be a list of chains (e.g. H,L)
lchain=as.character(D[i,3])
lchain=substring(lchain,1,1) #only one ligand chain
outfile=paste(BSBANK,"/",id,tchain,":",lchain,".dat",sep="")
#pdb=bio3d::trim.pdb(pdb, string="protein")
pdb=bio3d::trim.pdb(pdb, string="noh")
chains=unique(pdb$atom$chain)
tchain=intersect(tchain, chains)
tchain
lchain
#inds = get_binding_sites_2(pdb, target_chains=tchain, ligand_chains=lchain, add=get.pepit("ADD"))
target.pdb = bio3d::trim.pdb(pdb, chain=tchain, string="protein")
res = NULL
if (resid.mode) {
res = as.integer(unlist(strsplit(D[i,4], split=",")))
outfile=paste(BSBANK,"/",id,tchain,":",lchain, res[1],".dat",sep="")
}
outfile
res
ligand.pdb = bio3d::trim.pdb(pdb, chain=lchain, resno=res)
ligand.pdb$atom$resno
inds = get_binding_sites_2(target.pdb, ligand.pdb, add=get.pepit("ADD"))
tchain
ch=tchain
target.pdb=bio3d::trim.pdb(pdb, chain=ch)
target.data = encode(target.pdb)
warnings()
pdb=bio3d::read.pdb(id)
#pdb=bio3d::trim.pdb(pdb, string="protein")
pdb=bio3d::trim.pdb(pdb, string="noh")
#inds = get_binding_sites_2(pdb, target_chains=tchain, ligand_chains=lchain, add=get.pepit("ADD"))
target.pdb = bio3d::trim.pdb(pdb, chain=tchain, string="protein")
target.pdb=bio3d::trim.pdb(target.pdb, chain=ch)
target.data = encode(target.pdb)
help(atom.select)
inds
target.data
outfile
col = ifelse(file.exists(outfile), FALSE, TRUE)
col
write.table(target.data, quote=FALSE, col.names = col, row.names=FALSE, file=outfile, append=TRUE) #
infile="1avf"
BSBANK='Bank'
getwd()
setwd("..")
setwd("Pepit2024/")
#
# user defined parameters
#
set.pepit("CONTACT", 5.0)
set.pepit("ADD", "calpha")
set.pepit("HSECUTOFF", 13)
infile
infile="banque.dat"
D=read.table(infile, header=TRUE)
D
resid.mode = FALSE
if (ncol(D) == 4) resid.mode = TRUE
i=1
id=as.character(D[i,1])
pdb=bio3d::read.pdb(id)
pdb
tchain=as.character(D[i,2])# a target chain can be a list of chains (e.g. H,L)
lchain=as.character(D[i,3])
lchain=substring(lchain,1,1) #only one ligand chain
outfile=paste(BSBANK,"/",id,tchain,":",lchain,".dat",sep="")
outfile
#pdb=bio3d::trim.pdb(pdb, string="protein")
pdb=bio3d::trim.pdb(pdb, string="noh")
chains=unique(pdb$atom$chain)
tchain=intersect(tchain, chains)
if (length(tchain)==0) {
next
}
tchain
#inds = get_binding_sites_2(pdb, target_chains=tchain, ligand_chains=lchain, add=get.pepit("ADD"))
target.pdb = bio3d::trim.pdb(pdb, chain=tchain, string="protein")
ligand.pdb = bio3d::trim.pdb(pdb, chain=lchain, resno=res)
ligand.pdb
lchain
ligand.pdb = bio3d::trim.pdb(pdb, chain=lchain)
ligand.pdb
help("atom.select")
ligand.pdb = bio3d::trim.pdb(pdb, chain=lchain, resno=NULL)
ligand.pdb
inds = get_binding_sites_2(target.pdb, ligand.pdb, add=get.pepit("ADD"))
inds
for (ch in tchain) {
target.pdb=bio3d::trim.pdb(target.pdb, chain=ch)
target.data = encode(target.pdb)
eleno = pdb$atom$eleno[inds$atom]
target.data = target.data[target.data$eleno%in%eleno,]
col = ifelse(file.exists(outfile), FALSE, TRUE)
write.table(target.data, quote=FALSE, col.names = col, row.names=FALSE, file=outfile, append=TRUE) #
}
target.data
inds
inds$atom
pdb=bio3d::trim.pdb(target.pdb, chain=ch)
pdb
target.data
target.data = encode(pdb)
get.pepit("HSECUTOFF")
target.data
eleno = pdb$atom$eleno[inds$atom]
eleno
target.data$eleno%in%eleno
target.data[target.data$eleno%in%eleno,]
get.pepit("HSE")
library(pepit)
x=sample(1:10,50)
x
x=sample(1:10,50,T)
x
unique(x)
table(x)
?table
tabulate(x)
x=sample(1:10,5,T)
tabulate(x)
sort(unique(x))
table(x)
cat(table(x))
duplicated(x)
x
x=sample(1:10,50,T)
duplicated(x)
devtools::document()
library(pepit)
x
table(x)
names(table(x))
names(table(x))=""
attributes(table(x))
ftable(x)
table(x, deparse.level=0)
table(x, deparse.level=1)
table(x, deparse.level=22)
table(x, deparse.level=2)
tabulate(x)
table(x)[]
table(x)[1?]
table(x)[1,]
table(x)[1]
as.integer(table(x))

sel$atom
resno[2]
resno[1]
resno
resno[pdb$calpha]
hseu = integer(nrow(pdb$atom))
hsed = integer(nrow(pdb$atom))
for (i in 1:length(resno[pdb$calpha])) {
sel = atom.select(pdb, resno=resno[i])
hseu[sel$atom] = hse$hsebu[i]
hsed[sel$atom] = hse$hsebd[i]
}
hseu
hseu = integer(nrow(pdb$atom))
hsed = integer(nrow(pdb$atom))
r = resno[pdb$calpha]
for (i in 1:length(r)) {
sel = atom.select(pdb, resno=r[i])
hseu[sel$atom] = hse$hsebu[i]
hsed[sel$atom] = hse$hsebd[i]
}
hseu
library(pepit)
library(pepit)
library(pepit)
#
# inputs:
# target pdb file
# target chain(s)
# binding site bank or one bs pdb file
# label for generating output files
# outputs:
# score file
# alignment/matching file
# pdb files of posed peptides
library(pepit)
library(bio3d)
#
# user defined parameters
#
set.pepit("RESIDUES","")
set.pepit("PRECISION", 1.0)
set.pepit("ADD","calpha")
set.pepit("MINCLIQUE",6)
set.pepit("MINSCORE", 0) # tous les scores
set.pepit("MAXCLASHES", 1000) # clashes allowed
set.pepit("NBCLIQUES", 5)
set.pepit("NBHITS", 100)
set.pepit("POSE", TRUE)
set.pepit("TYPES", c("A","C","O","N")) # backbone atoms
set.pepit("PVALUE", TRUE)
#
criteria = "score"
tfile
tfile="1d4t"
tchain="A"
getwd()
setwd("~/3D/PepPro/1d4t/")
dir()
bank="../nanobank/"
prefix="1d4t"
deltadist = get.pepit("PRECISION")
maxdist = get.pepit("MAXDELTADIST")
allscorefile = paste(prefix, "all.score", sep="")
scorefile = paste(prefix, ".score", sep="")
alignfile = paste(prefix, ".al", sep="")
allscorefile
pdb = read.pdb(tfile)
###
resi=get.pepit("RESIDUES")
resi
resi=unlist(strsplit(resi,split=","))
resi=as.integer(resi)
resi
chainlist = unique(pdb$atom$chain)
tchain = unlist(strsplit(tchain,split=""))
if (tchain[1]=="*") tchain = chainlist
tchain = intersect(tchain, chainlist)
tchain
pdb = bio3d::trim.pdb(pdb,chain=tchain)
pdb
pdb = type_atoms(pdb)
get.pepit("ADD")
target = access_atoms(pdb, chains=tchain, add=get.pepit("ADD"), select=FALSE)
get.pepit("ACC")
target = trim_non_acc_atoms(target, minacc=get.pepit("ACC"))
length(resi)
X = target$atom[,c("x","y","z")]
X = as.matrix(X)
XProp = target$atom$elesy
N = nrow(X)
N
if (file.exists(bank) & dir.exists(bank)) { # if bank is directory of bs files
bslist = dir(bank)
bslist = paste(bank,"/",bslist,sep="")
} else if (file.exists(bank)) { # if bank is a bs file
bslist = bank
} else {
message("unknown bank")
q()
}
bslist
if (!file.exists(allscorefile)) cat("index bs target precision bslen alen rmsd coverage meandist score clashes\n", file=allscorefile)
for (bsfile in bslist) {
cat("bsfile =", bsfile,"\n")
bsnlig = read.pdb(bsfile)
chains = unique(bsnlig$atom$chain)
pos = min(gregexpr(":", bsfile)[[1]])
pepchain = substring(bsfile, pos+1, pos+1)
bsid = substring(bsfile, pos-5, pos-1)
chains = setdiff(chains, pepchain)
bs = bio3d::trim.pdb(bsnlig, chain=chains) # to get rid of peptide (chain P)
Y = bs$atom[,c("x","y","z")]
Y = as.matrix(Y)
YProp = bs$atom$elesy
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=get.pepit("MAXDELTADIST"), types=get.pepit("TYPES"))
if (length(result)==0) {
cat("no clique\n")
count = count+1
cat(count, bsfile, tfile, deltadist, nrow(Y), 0, 100, 0, maxdist+1, 0, "\n", file=scorefile, append=TRUE)
next
}
clusters = extend_cliques(X, XProp, Y, YProp, result, deltadist=deltadist)
clusters = remove_redundant_clusters (clusters)
scores = score_clusters(clusters, X, Y, deltadist=deltadist)
# test
# scores$score = sqrt(pmax(0,scores$score))
# scores$score = scores$score/scores$len
# fin test
o = order(scores[[criteria]], decreasing=TRUE)
nbcliques = min(length(clusters), get.pepit("NBCLIQUES"))
o = o[1:nbcliques]
scores = lapply(scores, "[", o)
clusters = clusters[o]
for (i in 1:length(clusters)) {
if(scores$score[i] >= get.pepit("MINSCORE")) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
count = count + 1
# patch
bs$atom$insert[is.na(bs$atom$insert)]=""
target$atom$insert[is.na(target$atom$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs$atom$resno[J],":",bs$atom$insert[J],":",bs$atom$elety[J],":",bs$atom$chain[J], sep="")
target_res = paste(target$atom$resno[I],":",target$atom$insert[I],":",target$atom$elety[I],":",target$atom$chain[I], sep="")
cat(">",count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], scores$pval[i],"\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
nbclashes = 0
if (get.pepit("POSE")) {
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites(clusters[[i]], bsnlig, target, pepchain=pepchain)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
cat(count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], nbclashes, "\n", file=allscorefile, append=TRUE)
}
}
}
count = 0
for (bsfile in bslist) {
cat("bsfile =", bsfile,"\n")
bsnlig = read.pdb(bsfile)
chains = unique(bsnlig$atom$chain)
pos = min(gregexpr(":", bsfile)[[1]])
pepchain = substring(bsfile, pos+1, pos+1)
bsid = substring(bsfile, pos-5, pos-1)
chains = setdiff(chains, pepchain)
bs = bio3d::trim.pdb(bsnlig, chain=chains) # to get rid of peptide (chain P)
Y = bs$atom[,c("x","y","z")]
Y = as.matrix(Y)
YProp = bs$atom$elesy
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=get.pepit("MAXDELTADIST"), types=get.pepit("TYPES"))
if (length(result)==0) {
cat("no clique\n")
count = count+1
cat(count, bsfile, tfile, deltadist, nrow(Y), 0, 100, 0, maxdist+1, 0, "\n", file=allscorefile, append=TRUE)
next
}
clusters = extend_cliques(X, XProp, Y, YProp, result, deltadist=deltadist)
clusters = remove_redundant_clusters (clusters)
scores = score_clusters(clusters, X, Y, deltadist=deltadist)
# test
# scores$score = sqrt(pmax(0,scores$score))
# scores$score = scores$score/scores$len
# fin test
o = order(scores[[criteria]], decreasing=TRUE)
nbcliques = min(length(clusters), get.pepit("NBCLIQUES"))
o = o[1:nbcliques]
scores = lapply(scores, "[", o)
clusters = clusters[o]
for (i in 1:length(clusters)) {
if(scores$score[i] >= get.pepit("MINSCORE")) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
count = count + 1
# patch
bs$atom$insert[is.na(bs$atom$insert)]=""
target$atom$insert[is.na(target$atom$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs$atom$resno[J],":",bs$atom$insert[J],":",bs$atom$elety[J],":",bs$atom$chain[J], sep="")
target_res = paste(target$atom$resno[I],":",target$atom$insert[I],":",target$atom$elety[I],":",target$atom$chain[I], sep="")
cat(">",count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], scores$pval[i],"\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
nbclashes = 0
if (get.pepit("POSE")) {
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites(clusters[[i]], bsnlig, target, pepchain=pepchain)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
cat(count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], nbclashes, "\n", file=allscorefile, append=TRUE)
}
}
}
D$clashes
get.pepit("MAXCLASHES")
head(D)
D = read.table(allscorefile, header=TRUE)
D$clashes
noclash = D$clashes<=get.pepit("MAXCLASHES")
pepnumbers = as.integer(D$count)
pepnumbers
header(D)
head(D)
pepnumbers = as.integer(D$index)
pepnumbers
noclash
D = D[noclash,]
o = order(D$score, decreasing=TRUE)#
D = D[o, ]
D
#D[,1] = 1:nrow(D)
nbhits = min(get.pepit("NBHITS"), nrow(D))
nbhits
get.pepit("NBHITS")
D = D[1:nbhits,]
write.table( D, quote=FALSE, row=FALSE, file=scorefile)
L = readLines(alignfile)
unlink(alignfile)
ind = grep(">",L)
ind = ind[noclash]
ind = ind[o]
ind = ind[1:nbhits,]
for (i in ind) {
cat(L[i:(i+2)], "\n", file=alignfile, append=TRUE)
}
D
unlink(alignfile)
ind = grep(">",L)
ind = ind[noclash]
ind = ind[o]
ind = ind[1:nbhits]
for (i in ind) {
cat(L[i:(i+2)], sep="\n", file=alignfile, append=TRUE)
}
rm = setdiff(pepnumbers, D$index)
rm
rmfiles = paste(prefix, "-", rm , ".pdb", sep="")
rmfiles
unlink(rmfiles)
for (k in 1:nrow(D)) {
pepfile = paste(prefix, "-", D[k,"index"], ".pdb", sep="")
if (!file.exists(pepfile)) next
newfile = paste(prefix, "_peptide","-", k, ".pdb", sep="")
liste = rbind(liste, c(pepfile, newfile))
command = paste("mv ", pdbfile, " ", outfile, sep="")
cat(command,"\n")
system(command)
}
liste=NULL
for (k in 1:nrow(D)) {
pepfile = paste(prefix, "-", D[k,"index"], ".pdb", sep="")
if (!file.exists(pepfile)) next
newfile = paste(prefix, "_peptide","-", k, ".pdb", sep="")
liste = rbind(liste, c(pepfile, newfile))
command = paste("mv ", pdbfile, " ", outfile, sep="")
cat(command,"\n")
#system(command)
}
liste
liste=NULL
for (k in 1:nrow(D)) {
pepfile = paste(prefix, "-", D[k,"index"], ".pdb", sep="")
if (!file.exists(pepfile)) next
newfile = paste(prefix, "_peptide","-", k, ".pdb", sep="")
liste = rbind(liste, c(pepfile, newfile))
command = paste("mv ", pdbfile, " ", outfile, sep="")
cat(command,"\n")
system(command)
}
liste=NULL
for (k in 1:nrow(D)) {
pepfile = paste(prefix, "-", D[k,"index"], ".pdb", sep="")
if (!file.exists(pepfile)) next
newfile = paste(prefix, "_peptide","-", k, ".pdb", sep="")
liste = rbind(liste, c(pepfile, newfile))
command = paste("mv ", pepfile, " ", outfile, sep="")
cat(command,"\n")
#system(command)
}
liste=NULL
for (k in 1:nrow(D)) {
pepfile = paste(prefix, "-", D[k,"index"], ".pdb", sep="")
if (!file.exists(pepfile)) next
newfile = paste(prefix, "_peptide","-", k, ".pdb", sep="")
liste = rbind(liste, c(pepfile, newfile))
command = paste("mv ", pepfile, " ", newfile, sep="")
cat(command,"\n")
#system(command)
}
liste=NULL
for (k in 1:nrow(D)) {
pepfile = paste(prefix, "-", D[k,"index"], ".pdb", sep="")
if (!file.exists(pepfile)) next
newfile = paste(prefix, "_peptide","-", k, ".pdb", sep="")
liste = rbind(liste, c(pepfile, newfile))
command = paste("mv ", pepfile, " ", newfile, sep="")
cat(command,"\n")
system(command)
}
getwd()
setwd("../2yb6")
prefix="2yb6"
allscorefile = paste(prefix, "all.score", sep="")
scorefile = paste(prefix, ".score", sep="")
alignfile = paste(prefix, ".al", sep="")
allscorefile
scorefile
alfile
alignfile
#
# sort results for best scores and or p-value (scores here)
#
D = read.table(allscorefile, header=TRUE)
get.pepit("MAXCLASHES")
set.pepit("MAXCLASHES", 20)
noclash = D$clashes<=get.pepit("MAXCLASHES")
pepnumbers = as.integer(D$index)
D = D[noclash,]
o = order(D$score, decreasing=TRUE)#
D = D[o, ]
#D[,1] = 1:nrow(D)
nbhits = min(get.pepit("NBHITS"), nrow(D))
D = D[1:nbhits,]
write.table(D, quote=FALSE, row=FALSE, file=scorefile)
L = readLines(alignfile)
unlink(alignfile)
ind = grep(">",L)
ind = ind[noclash]
ind = ind[o]
ind = ind[1:nbhits]
for (i in ind) {
cat(L[i:(i+2)], sep="\n", file=alignfile, append=TRUE)
}
rm = setdiff(pepnumbers, D$index)
rmfiles = paste(prefix, "-", rm , ".pdb", sep="")
unlink(rmfiles)
liste=NULL
for (k in 1:nrow(D)) {
pepfile = paste(prefix, "-", D[k,"index"], ".pdb", sep="")
if (!file.exists(pepfile)) next
newfile = paste(prefix, "_peptide","-", k, ".pdb", sep="")
liste = rbind(liste, c(pepfile, newfile))
command = paste("mv ", pepfile, " ", newfile, sep="")
cat(command,"\n")
system(command)
}
pdb=read.pdb("2yb6")
getwd()
library(pepit)
help("dir")
pdb
pdb$xyz
help(xyz.coords)
xyz.coords(pdb$atom$x, pdb$atom$y, pdb$atom$xyz)
result=xyz.coords(pdb$atom$x, pdb$atom$y, pdb$atom$xyz)
?bio3d::xyz2atom
xyz.ind <- atom2xyz(c(1,10,15))
xyz.ind
xyz2atom(xyz.ind)
x=pdb$atom$x
x
length(x)
pdb$atom$xyz
y=pdb$atom$y
z=pdb$atom$z
length(x)
x=x[1:10]
y=y[1:10]
z=z[1:10]
x
y
z
as.vector(rbind(x,y,z))
I=c(1,3,7)
as.select(I)
as.select(I)$xyz
?fit.xyz
pdb$xyz
tfile
tfile="1awr"
tchain="A"
bank
bank="Bank"
prefix
prefix="test"
getwd()
setwd("~/3D/Pepit2024/")
library(pepit)
superpose_sites()
superpose_sites
superpose_sites2
bio3d::superpose_sites2
document()
library(pepit)
superpose_sites2
devtools::document()
getwd()
setwd("~/pepit/")
devtools::document()
library(pepit)
#
# inputs:
# target pdb file
# target chain(s)
# binding site bank or one bs pdb file
# label for generating output files
# outputs:
# score file
# alignment/matching file
# pdb files of posed peptides
library(pepit)
library(bio3d)
#
# user defined parameters
#
set.pepit("RESIDUES","")
set.pepit("PRECISION", 1.0)
set.pepit("ADD","calpha")
set.pepit("MINCLIQUE",6)
set.pepit("MINSCORE", 0) # tous les scores
set.pepit("MAXCLASHES", 1000) # clashes allowed
set.pepit("NBCLIQUES", 5)
set.pepit("NBHITS", 100)
set.pepit("POSE", TRUE)
set.pepit("TYPES", c("A","C","O","N")) # backbone atoms
set.pepit("PVALUE", TRUE)
#
criteria = "score"
args = commandArgs(trailingOnly=TRUE)
args
tfile
tchain
bank
prefix
deltadist = get.pepit("PRECISION")
maxdist = get.pepit("MAXDELTADIST")
allscorefile = paste(prefix, "all.score", sep="")
scorefile = paste(prefix, ".score", sep="")
alignfile = paste(prefix, ".al", sep="")
scorefile
alignfile
###
resi=get.pepit("RESIDUES")
resi=unlist(strsplit(resi,split=","))
resi=as.integer(resi)
chainlist = unique(pdb$atom$chain)
tchain = unlist(strsplit(tchain,split=""))
if (tchain[1]=="*") tchain = chainlist
tchain = intersect(tchain, chainlist)
pdb = read.pdb(tfile)
pdb = bio3d::trim.pdb(pdb,chain=tchain)
target.data = encode(pdb)
warnings()
pdb = read.pdb(tfile)
pdb = bio3d::trim.pdb(pdb, string="protein")
pdb = bio3d::trim.pdb(pdb, string="noh")
pdb = bio3d::trim.pdb(pdb,chain=tchain)
target.data = encode(pdb)
X = target.data[,c("x","y","z")]
X = as.matrix(X)
XProp = target.data$elety
N = nrow(X)
dim(X)
X
dim(X)
XProp
N
if (!file.exists(allscorefile)) cat("index bs target precision bslen alen rmsd coverage meandist score clashes\n", file=allscorefile)
count = 0
bslist
if (file.exists(bank) & dir.exists(bank)) { # if bank is directory of bs files
bslist = dir(bank, pattern=".dat")
bslist = paste(bank,"/",bslist,sep="")
} else if (file.exists(bank)) { # if bank is a bs file
bslist = bank
} else {
message("unknown bank")
q()
}

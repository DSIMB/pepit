dir.exists(bank)
if (file.exists(bank) & dir.exists(bank)) { # if bank is directory of bs files
bslist = dir(bank, pattern=".dat")
bslist = paste(bank,"/",bslist,sep="")
} else if (file.exists(bank)) { # if bank is a bs file
bslist = bank
} else {
message("unknown bank")
q()
}
bslist
cat("encode target...\n")
target.data = encode(pdb)
X = target.data[,c("x","y","z")]
X = as.matrix(X)
XProp = target.data$elety
N = nrow(X)
if (!file.exists(allscorefile)) cat("index bs target precision bslen alen rmsd coverage meandist score clashes\n", file=allscorefile)
count = 0
bsfile=bslist[1]
bsfile
cat("bsfile =", bsfile,"\n")
bs.data = read.table(bsfile)
library(pepit)
encode
library(pepit)
encode
?write.table
library(pepit)
library(pepit)
library(pepit)
source("~/pepit/R/encode.R")
source("~/pepit/R/encode.R")
library(pepit)
library(pepit)
tfile
bsfile
cat("bsfile =", bsfile,"\n")
bs.data = read.table(bsfile)
bs.data
chains = unique(bs.data$chain)
chains
head(bs.data)
bs.data = read.table(bsfile, header=TRUE)
chains = unique(bs.data$chain)
chains
Y = bs.data[,c("x","y","z")]
Y
Y = as.matrix(Y)
YProp = bs.data$elety
YProp
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=get.pepit("MAXDELTADIST"), types=get.pepit("TYPES"))
types=get.pepit("TYPES")
types
set.pepit("TYPES", c("A","C","O","N")) # backbone atoms
types=get.pepit("TYPES")
types
result = cliques(X, XProp, Y, YProp, deltadist=1.0, mindist=0.0, maxdist=get.pepit("MAXDELTADIST"), types=get.pepit("TYPES"))
if (length(result)==0) {
cat("no clique\n")
count = count+1
cat(count, bsfile, tfile, deltadist, nrow(Y), 0, 100, 0, maxdist+1, 0, "\n", file=allscorefile, append=TRUE)
next
}
clusters = extend_cliques(X, XProp, Y, YProp, result, deltadist=deltadist)
clusters = remove_redundant_clusters (clusters)
scores = score_clusters(clusters, X, Y, deltadist=deltadist)
# test
# scores$score = sqrt(pmax(0,scores$score))
# scores$score = scores$score/scores$len
# fin test
o = order(scores[[criteria]], decreasing=TRUE)
nbcliques = min(length(clusters), get.pepit("NBCLIQUES"))
o = o[1:nbcliques]
scores = lapply(scores, "[", o)
clusters = clusters[o]
for (i in 1:length(clusters)) {
if(scores$score[i] >= get.pepit("MINSCORE")) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
count = count + 1
# patch
bs.data$insert[is.na(bs.data$insert)]=""
target.data$insert[is.na(target.data$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs.data$resno[J],":",bs.data$insert[J],":",bs.data$elety[J],":",bs.data$chain[J], sep="")
target_res = paste(target.data$resno[I],":",target.data$insert[I],":",target.data$elety[I],":",target.data$chain[I], sep="")
cat(">",count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], scores$pval[i],"\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
nbclashes = 0
if (get.pepit("POSE")) {
pos = min(gregexpr(":", bsfile)[[1]])
pepchain = substring(bsfile, pos+1, pos+1)
bsid = substring(bsfile, pos-5, pos-1)
pepfile = paste(bsid, pepchain, ".pdb", sep="")
peptide = bio3d::read.pdb(pepfile)
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide, pepchain=pepchain)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
cat(count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], nbclashes, "\n", file=allscorefile, append=TRUE)
}
}
pepfile
for (i in 1:length(clusters)) {
if(scores$score[i] >= get.pepit("MINSCORE")) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
count = count + 1
# patch
bs.data$insert[is.na(bs.data$insert)]=""
target.data$insert[is.na(target.data$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs.data$resno[J],":",bs.data$insert[J],":",bs.data$elety[J],":",bs.data$chain[J], sep="")
target_res = paste(target.data$resno[I],":",target.data$insert[I],":",target.data$elety[I],":",target.data$chain[I], sep="")
cat(">",count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], scores$pval[i],"\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
nbclashes = 0
if (get.pepit("POSE")) {
pos = min(gregexpr(":", bsfile)[[1]])
pepchain = substring(bsfile, pos+1, pos+1)
bsid = substring(bsfile, pos-5, pos-1)
pepfile = paste(bank, bsid, pepchain, ".pdb", sep="")
peptide = bio3d::read.pdb(pepfile)
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide, pepchain=pepchain)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
cat(count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], nbclashes, "\n", file=allscorefile, append=TRUE)
}
}
pepfile
for (i in 1:length(clusters)) {
if(scores$score[i] >= get.pepit("MINSCORE")) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
count = count + 1
# patch
bs.data$insert[is.na(bs.data$insert)]=""
target.data$insert[is.na(target.data$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs.data$resno[J],":",bs.data$insert[J],":",bs.data$elety[J],":",bs.data$chain[J], sep="")
target_res = paste(target.data$resno[I],":",target.data$insert[I],":",target.data$elety[I],":",target.data$chain[I], sep="")
cat(">",count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], scores$pval[i],"\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
nbclashes = 0
if (get.pepit("POSE")) {
pos = min(gregexpr(":", bsfile)[[1]])
pepchain = substring(bsfile, pos+1, pos+1)
bsid = substring(bsfile, pos-5, pos-1)
pepfile = paste(bank, "/",bsid, pepchain, ".pdb", sep="")
peptide = bio3d::read.pdb(pepfile)
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide, pepchain=pepchain)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
cat(count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], nbclashes, "\n", file=allscorefile, append=TRUE)
}
}
pepfile
pepchain
bsid
bsid = substring(bsfile, 1,4)
pepfile = paste(bank, "/",bsid, pepchain, ".pdb", sep="")
peptide = bio3d::read.pdb(pepfile)
pepfile
bsid = substring(bsfile, pos-5, pos-2)
pepfile = paste(bank, "/",bsid, pepchain, ".pdb", sep="")
peptide = bio3d::read.pdb(pepfile)
pepfile
for (i in 1:length(clusters)) {
if(scores$score[i] >= get.pepit("MINSCORE")) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
count = count + 1
# patch
bs.data$insert[is.na(bs.data$insert)]=""
target.data$insert[is.na(target.data$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs.data$resno[J],":",bs.data$insert[J],":",bs.data$elety[J],":",bs.data$chain[J], sep="")
target_res = paste(target.data$resno[I],":",target.data$insert[I],":",target.data$elety[I],":",target.data$chain[I], sep="")
cat(">",count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], scores$pval[i],"\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
nbclashes = 0
if (get.pepit("POSE")) {
pos = min(gregexpr(":", bsfile)[[1]])
pepchain = substring(bsfile, pos+1, pos+1)
bsid = substring(bsfile, pos-5, pos-2)
pepfile = paste(bank, "/",bsid, pepchain, ".pdb", sep="")
peptide = bio3d::read.pdb(pepfile)
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide, pepchain=pepchain)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
cat(count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], nbclashes, "\n", file=allscorefile, append=TRUE)
}
}
library(pepit)
devtools::document()
setwd("~/pepit/")
devtools::document()
library(pepit)
library(pepit)
for (i in 1:length(clusters)) {
if(scores$score[i] >= get.pepit("MINSCORE")) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
count = count + 1
# patch
bs.data$insert[is.na(bs.data$insert)]=""
target.data$insert[is.na(target.data$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs.data$resno[J],":",bs.data$insert[J],":",bs.data$elety[J],":",bs.data$chain[J], sep="")
target_res = paste(target.data$resno[I],":",target.data$insert[I],":",target.data$elety[I],":",target.data$chain[I], sep="")
cat(">",count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], scores$pval[i],"\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
nbclashes = 0
if (get.pepit("POSE")) {
pos = min(gregexpr(":", bsfile)[[1]])
pepchain = substring(bsfile, pos+1, pos+1)
bsid = substring(bsfile, pos-5, pos-2)
pepfile = paste(bank, "/",bsid, pepchain, ".pdb", sep="")
peptide = bio3d::read.pdb(pepfile)
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide, pepchain=pepchain)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
cat(count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], nbclashes, "\n", file=allscorefile, append=TRUE)
}
}
pepfile
setwd("~/3D/Pepit2024/)
)
""
""
setwd("~/3D/Pepit2024/")
for (i in 1:length(clusters)) {
if(scores$score[i] >= get.pepit("MINSCORE")) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
count = count + 1
# patch
bs.data$insert[is.na(bs.data$insert)]=""
target.data$insert[is.na(target.data$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs.data$resno[J],":",bs.data$insert[J],":",bs.data$elety[J],":",bs.data$chain[J], sep="")
target_res = paste(target.data$resno[I],":",target.data$insert[I],":",target.data$elety[I],":",target.data$chain[I], sep="")
cat(">",count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], scores$pval[i],"\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
nbclashes = 0
if (get.pepit("POSE")) {
pos = min(gregexpr(":", bsfile)[[1]])
pepchain = substring(bsfile, pos+1, pos+1)
bsid = substring(bsfile, pos-5, pos-2)
pepfile = paste(bank, "/",bsid, pepchain, ".pdb", sep="")
peptide = bio3d::read.pdb(pepfile)
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide, pepchain=pepchain)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
cat(count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], nbclashes, "\n", file=allscorefile, append=TRUE)
}
}
pepchain
for (i in 1:length(clusters)) {
if(scores$score[i] >= get.pepit("MINSCORE")) {
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
count = count + 1
# patch
bs.data$insert[is.na(bs.data$insert)]=""
target.data$insert[is.na(target.data$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs.data$resno[J],":",bs.data$insert[J],":",bs.data$elety[J],":",bs.data$chain[J], sep="")
target_res = paste(target.data$resno[I],":",target.data$insert[I],":",target.data$elety[I],":",target.data$chain[I], sep="")
cat(">",count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], scores$pval[i],"\n", file=alignfile, append=TRUE)
cat(bs_res, "\n", file=alignfile, append=TRUE)
cat(target_res, "\n", file=alignfile, append=TRUE)
nbclashes = 0
if (get.pepit("POSE")) {
pos = min(gregexpr(":", bsfile)[[1]])
pepchain = substring(bsfile, pos+1, pos+1)
bsid = substring(bsfile, pos-5, pos-2)
pepfile = paste(bank, "/",bsid, pepchain, ".pdb", sep="")
peptide = bio3d::read.pdb(pepfile)
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
}
cat(count, bsfile, tfile, deltadist, scores$len[i], scores$alen[i], scores$rmsd[i], scores$coverage[i], scores$distorsion[i], scores$score[i], nbclashes, "\n", file=allscorefile, append=TRUE)
}
}
i
scores$score[i]
get.pepit("MINSCORE")
N
I = (clusters[[i]]-1)%%N+1 # target indices
J = (clusters[[i]]-1)%/%N+1# bs indices
I
J
# patch
bs.data$insert[is.na(bs.data$insert)]=""
target.data$insert[is.na(target.data$insert)]=""
# fin patch
# output matching (= non seq. alignment) in .al file
bs_res = paste(bs.data$resno[J],":",bs.data$insert[J],":",bs.data$elety[J],":",bs.data$chain[J], sep="")
target_res = paste(target.data$resno[I],":",target.data$insert[I],":",target.data$elety[I],":",target.data$chain[I], sep="")
get.pepit("POSE")
pepfile
peptide
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide)
cluster=clusters[[i]]
bs=bs.data
target=target.data
N = nrow(target)
N
I = (cluster-1)%%N+1 # target indices
J = (cluster-1)%/%N+1# query indices
target.ind = as.select(I)$xyz
bs.ind = as.select(J)$xyz
target.xyz = as.vector(rbind(target$x, target$y, target$z))
bs.xyz = as.vector(rbind(bs$x, bs$y, bs$z))
mobile.xyz = c(bs.xyz, peptide$xyz)
moved.xyz = fit.xyz(fixed=target.xyz, mobile=mobile.xyz, fixed.inds=target.ind, mobile.inds=bs.ind, verbose=FALSE)
hitrmsd=bio3d::rmsd(moved$xyz, b=target.xyz, a.inds=bs.ind, b.inds=target.ind)
hitrmsd=bio3d::rmsd(moved.xyz, b=target.xyz, a.inds=bs.ind, b.inds=target.ind)
hitrmsd
source("~/pepit/R/superposeSites.R")
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide)
source("~/pepit/R/superposeSites.R")
# output binding site posed on target in a .pdb file
ligand.moved = superpose_sites2(clusters[[i]], bs.data, target.data, peptide)
nbclashes = clashes(ligand.moved, pdb)
cat("nbclashes=", nbclashes,"\n")
if (nbclashes <= get.pepit("MAXCLASHES")) {
pepfile = paste(prefix, "-", count, ".pdb",sep="")
write.pdb(pdb=ligand.moved, file = pepfile)
}
library(pepit)
library(pepit)
library(pepit)
library(pepit)
dim(XProp)
pdb
dim(X)
dim(target.data)
length(Xprop)
length(XProp)
bsfile
dim(Y)
length(YProp)
deltadist
mindist
mindist=0
maxdist
types
dim(XProp)
XProp = target.data
YProp = bs.data
dim(XProp)
dim(YProp)
clusters=list()
N=nrow(X)
N
J=which(YProp$elety %in% types)
I=which(XProp$elety %in% types)
types
I
J
types
types=c("A", "N")
J=which(YProp$elety %in% types)
I=which(XProp$elety %in% types)
I
J
V=vertex(XProp[I,], YProp[J,], length(I)*length(J), mode=0)
V
XProp$elety[V[,2]]
V=cbind(J[V[,1]],I[V[,2]]) # atom ids 1..M, 1..N
XProp$elety[V[,2]]
x=XProp$elety[V[,2]]
y=YProp$elety[V[,1]]
length(x)
length(y)
all(x==y)
V=vertex(XProp[I,], YProp[J,], length(I)*length(J), mode=1)
dim(V)
x=XProp$elety[V[,2]]
y=YProp$elety[V[,1]]
all(x==y)
V=cbind(J[V[,1]],I[V[,2]]) # atom ids 1..M, 1..N
x=XProp$elety[V[,2]]
y=YProp$elety[V[,1]]
all(x==y)
x=XProp$hseu[V[,2]]
y=YProp$hseu[V[,1]]
x
y
all(x>10 & y>10)
x[1:20]
y[1:20]
plot(x,y)
abline(h=10, v=10)
all(x>=10 & y>=10)
x>=10
y>=10
which(!(x>=10 & y>=10)
)
ind = which(!(x>=10 & y>=10))
x[ind]
y[ind]
all((x>=10 & y>=10) | (x<10 & y<10))
dim(V)
library(pepit)
V=vertex(XProp[I,], YProp[J,], length(I)*length(J), mode=1)
dim(V)
strcmp("aa","aa")
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
source("~/pepit/inst/pepit2.R")
library(pepit)
help("writeLines")
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
library(pepit)
